{
  final ViewGroup.LayoutParams lp=listItemView.getLayoutParams();
  final int originalLayoutHeight=lp.height;
  int originalHeight=listItemView.getHeight();
  ValueAnimator animator=ValueAnimator.ofInt(originalHeight,1).setDuration(mAnimationTime);
  animator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      boolean noAnimationLeft;
synchronized (mAnimationLock) {
        --mDismissAnimationRefCount;
        mAnimatedViews.remove(dismissView);
        noAnimationLeft=mDismissAnimationRefCount == 0;
      }
      if (noAnimationLeft) {
        for (        PendingDismissData dismiss : mPendingDismisses) {
          if (mUndoStyle == UndoStyle.SINGLE_POPUP) {
            for (            Undoable undoable : mUndoActions) {
              undoable.discard();
            }
            mUndoActions.clear();
          }
          Undoable undoable=mDismissCallback.onDismiss(EnhancedListView.this,dismiss.position);
          if (undoable != null) {
            mUndoActions.add(undoable);
          }
          mValidDelayedMsgId++;
        }
        if (!mUndoActions.isEmpty()) {
          changePopupText();
          changeButtonLabel();
          float yLocationOffset=getResources().getDimension(R.dimen.elv_undo_bottom_offset);
          mUndoPopup.setWidth((int)Math.min(mScreenDensity * 400,getWidth() * 0.9f));
          mUndoPopup.showAtLocation(EnhancedListView.this,Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM,0,(int)yLocationOffset);
          if (!mTouchBeforeAutoHide) {
            mHideUndoHandler.sendMessageDelayed(mHideUndoHandler.obtainMessage(mValidDelayedMsgId),mUndoHideDelay);
          }
        }
        ViewGroup.LayoutParams lp;
        for (        PendingDismissData pendingDismiss : mPendingDismisses) {
          ViewHelper.setAlpha(pendingDismiss.view,1f);
          ViewHelper.setTranslationX(pendingDismiss.view,0);
          lp=pendingDismiss.childView.getLayoutParams();
          lp.height=originalLayoutHeight;
          pendingDismiss.childView.setLayoutParams(lp);
        }
        mPendingDismisses.clear();
      }
    }
  }
);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      lp.height=(Integer)valueAnimator.getAnimatedValue();
      listItemView.setLayoutParams(lp);
    }
  }
);
  mPendingDismisses.add(new PendingDismissData(dismissPosition,dismissView,listItemView));
  animator.start();
}
