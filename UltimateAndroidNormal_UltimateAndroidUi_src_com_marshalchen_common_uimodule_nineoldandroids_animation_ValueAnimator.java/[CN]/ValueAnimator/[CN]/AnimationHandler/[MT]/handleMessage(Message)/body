{
  boolean callAgain=true;
  ArrayList<ValueAnimator> animations=sAnimations.get();
  ArrayList<ValueAnimator> delayedAnims=sDelayedAnims.get();
switch (msg.what) {
case ANIMATION_START:
    ArrayList<ValueAnimator> pendingAnimations=sPendingAnimations.get();
  if (animations.size() > 0 || delayedAnims.size() > 0) {
    callAgain=false;
  }
while (pendingAnimations.size() > 0) {
  ArrayList<ValueAnimator> pendingCopy=(ArrayList<ValueAnimator>)pendingAnimations.clone();
  pendingAnimations.clear();
  int count=pendingCopy.size();
  for (int i=0; i < count; ++i) {
    ValueAnimator anim=pendingCopy.get(i);
    if (anim.mStartDelay == 0) {
      anim.startAnimation();
    }
 else {
      delayedAnims.add(anim);
    }
  }
}
case ANIMATION_FRAME:
long currentTime=AnimationUtils.currentAnimationTimeMillis();
ArrayList<ValueAnimator> readyAnims=sReadyAnims.get();
ArrayList<ValueAnimator> endingAnims=sEndingAnims.get();
int numDelayedAnims=delayedAnims.size();
for (int i=0; i < numDelayedAnims; ++i) {
ValueAnimator anim=delayedAnims.get(i);
if (anim.delayedAnimationFrame(currentTime)) {
readyAnims.add(anim);
}
}
int numReadyAnims=readyAnims.size();
if (numReadyAnims > 0) {
for (int i=0; i < numReadyAnims; ++i) {
ValueAnimator anim=readyAnims.get(i);
anim.startAnimation();
anim.mRunning=true;
delayedAnims.remove(anim);
}
readyAnims.clear();
}
int numAnims=animations.size();
int i=0;
while (i < numAnims) {
ValueAnimator anim=animations.get(i);
if (anim.animationFrame(currentTime)) {
endingAnims.add(anim);
}
if (animations.size() == numAnims) {
++i;
}
 else {
--numAnims;
endingAnims.remove(anim);
}
}
if (endingAnims.size() > 0) {
for (i=0; i < endingAnims.size(); ++i) {
endingAnims.get(i).endAnimation();
}
endingAnims.clear();
}
if (callAgain && (!animations.isEmpty() || !delayedAnims.isEmpty())) {
sendEmptyMessageDelayed(ANIMATION_FRAME,Math.max(0,sFrameDelay - (AnimationUtils.currentAnimationTimeMillis() - currentTime)));
}
break;
}
}
