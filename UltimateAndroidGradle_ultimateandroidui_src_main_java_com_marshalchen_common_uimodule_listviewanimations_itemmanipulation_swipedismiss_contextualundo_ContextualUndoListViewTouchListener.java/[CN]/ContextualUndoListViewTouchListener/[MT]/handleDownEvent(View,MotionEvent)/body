{
  mDisallowSwipe=false;
  if (mPaused) {
    return false;
  }
  Rect rect=new Rect();
  int childCount=mListView.getChildCount();
  int[] listViewCoords=new int[2];
  mListView.getLocationOnScreen(listViewCoords);
  int x=(int)motionEvent.getRawX() - listViewCoords[0];
  int y=(int)motionEvent.getRawY() - listViewCoords[1];
  View child;
  for (int i=0; i < childCount; i++) {
    child=mListView.getChildAt(i);
    child.getHitRect(rect);
    if (rect.contains(x,y)) {
      mDownView=child;
      break;
    }
  }
  if (mDownView != null && mDownView instanceof ContextualUndoView) {
    mDownX=motionEvent.getRawX();
    mDownY=motionEvent.getRawY();
    int downPosition=AdapterViewUtil.getPositionForView(mListView,mDownView);
    if (mDismissableManager != null) {
      long downId=mListView.getAdapter().getItemId(downPosition);
      if (!mDismissableManager.isDismissable(downId,downPosition)) {
        return false;
      }
    }
    mTouchChildTouched=!mIsParentHorizontalScrollContainer && mResIdOfTouchChild == 0;
    if (mResIdOfTouchChild != 0) {
      mIsParentHorizontalScrollContainer=false;
      final View childView=mDownView.findViewById(mResIdOfTouchChild);
      if (childView != null) {
        final Rect childRect=getChildViewRect(mListView,childView);
        if (childRect.contains((int)motionEvent.getX(),(int)motionEvent.getY())) {
          mTouchChildTouched=true;
          mListView.requestDisallowInterceptTouchEvent(true);
        }
      }
    }
    if (mIsParentHorizontalScrollContainer) {
      mTouchChildTouched=true;
      mListView.requestDisallowInterceptTouchEvent(true);
    }
    mDownY=motionEvent.getRawY();
    mDownPosition=AdapterViewUtil.getPositionForView(mListView,mDownView);
    if (mTouchChildTouched) {
      mVelocityTracker=VelocityTracker.obtain();
      mVelocityTracker.addMovement(motionEvent);
    }
 else {
      mVelocityTracker=null;
    }
  }
  view.onTouchEvent(motionEvent);
  return true;
}
