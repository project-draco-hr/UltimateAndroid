{
  float prevValue=0f;
  int boundsWidth=mBounds.width();
  if (mMirrorMode)   boundsWidth/=2;
  int width=boundsWidth + mSeparatorLength + mSectionsCount;
  int centerY=mBounds.centerY();
  float xSectionWidth=1f / mSectionsCount;
  if (mNewTurn) {
    mColorsIndex=decrementColor(mColorsIndex);
    mNewTurn=false;
    if (isFinishing()) {
      mStartSection++;
      if (mStartSection > mSectionsCount) {
        stop();
        return;
      }
    }
    if (mCurrentSections < mSectionsCount) {
      mCurrentSections++;
    }
  }
  float startX;
  float endX;
  float firstX=0;
  float lastX=0;
  float prev;
  float end;
  float spaceLength;
  float xOffset;
  float ratioSectionWidth;
  float sectionWidth;
  float drawLength;
  int currentIndexColor=mColorsIndex;
  if (mStartSection == mCurrentSections && mCurrentSections == mSectionsCount) {
    firstX=canvas.getWidth();
  }
  for (int i=0; i <= mCurrentSections; ++i) {
    xOffset=xSectionWidth * i + mCurrentOffset;
    prev=Math.max(0f,xOffset - xSectionWidth);
    ratioSectionWidth=Math.abs(mInterpolator.getInterpolation(prev) - mInterpolator.getInterpolation(Math.min(xOffset,1f)));
    sectionWidth=(int)(width * ratioSectionWidth);
    if (sectionWidth + prev < width)     spaceLength=Math.min(sectionWidth,mSeparatorLength);
 else     spaceLength=0f;
    drawLength=sectionWidth > spaceLength ? sectionWidth - spaceLength : 0;
    end=prevValue + drawLength;
    if (end > prevValue && i >= mStartSection) {
      startX=Math.min(boundsWidth,prevValue);
      endX=Math.min(boundsWidth,end);
      drawLine(canvas,boundsWidth,startX,centerY,endX,centerY,currentIndexColor);
      if (i == mStartSection) {
        firstX=startX;
      }
    }
    if (i == mCurrentSections) {
      lastX=prevValue + sectionWidth;
    }
    prevValue=end + spaceLength;
    currentIndexColor=incrementColor(currentIndexColor);
  }
  drawBackgroundIfNeeded(canvas,firstX,lastX);
}
