{
  int width=imageIn.getWidth();
  int height=imageIn.getHeight();
  int r, g, b;
  Image clone=imageIn.clone();
  for (int x=0; x < width; x++) {
    for (int y=0; y < height; y++) {
      int color1=GetPixelColor(clone,x - 1,y - 1,width,height);
      int color2=GetPixelColor(clone,x,y - 1,width,height);
      int color3=GetPixelColor(clone,x + 1,y - 1,width,height);
      int color4=GetPixelColor(clone,x - 1,y,width,height);
      int color5=GetPixelColor(clone,x + 1,y,width,height);
      int color6=GetPixelColor(clone,x - 1,y + 1,width,height);
      int color7=GetPixelColor(clone,x,y + 1,width,height);
      int color8=GetPixelColor(clone,x + 1,y + 1,width,height);
      int color1RGB=(0x00FF0000 & color1) >> 16;
      int color3RGB=(0x00FF0000 & color3) >> 16;
      int color6RGB=(0x00FF0000 & color6) >> 16;
      int color8RGB=(0x00FF0000 & color8) >> 16;
      int colorSum1=(color1RGB * k00 + color3RGB * k02 + ((0x00FF0000 & color2) >> 16) * k01 + color6RGB * k20 + ((0x00FF0000 & color7) >> 16) * k21 + color8RGB * k22) >> 8;
      int colorSum2=(color1RGB * k00 + color3RGB * k20 + ((0x00FF0000 & color4) >> 16) * k01 + color6RGB * k02 + ((0x00FF0000 & color5) >> 16) * k21 + color8RGB * k22) >> 8;
      r=(((colorSum1 * colorSum1) + (colorSum2 * colorSum2)) > thresholdSq) ? 0 : 0xff;
      if (this.DoInversion) {
        r=255 - r;
      }
      color1RGB=(0x0000FF00 & color1) >> 8;
      color3RGB=(0x0000FF00 & color3) >> 8;
      color6RGB=(0x0000FF00 & color6) >> 8;
      color8RGB=(0x0000FF00 & color8) >> 8;
      colorSum1=(color1RGB * k00 + color3RGB * k02 + ((0x0000FF00 & color2) >> 8) * k01 + color6RGB * k20 + ((0x0000FF00 & color7) >> 8) * k21 + color8RGB * k22) >> 8;
      colorSum2=(color1RGB * k00 + color3RGB * k20 + ((0x0000FF00 & color4) >> 8) * k01 + color6RGB * k02 + ((0x0000FF00 & color5) >> 8) * k21 + color8RGB * k22) >> 8;
      g=(((colorSum1 * colorSum1) + (colorSum2 * colorSum2)) > thresholdSq) ? 0 : 0xff;
      if (this.DoInversion) {
        g=255 - g;
      }
      color1RGB=0x000000FF & color1;
      color3RGB=0x000000FF & color3;
      color6RGB=0x000000FF & color6;
      color8RGB=0x000000FF & color8;
      colorSum1=(color1RGB * k00 + color3RGB * k02 + (0x000000FF & color2) * k01 + color6RGB * k20 + (0x000000FF & color7) * k21 + color8RGB * k22) >> 8;
      colorSum2=(color1RGB * k00 + color3RGB * k20 + (0x000000FF & color4) * k01 + color6RGB * k02 + (0x000000FF & color5) * k21 + color8RGB * k22) >> 8;
      b=(((colorSum1 * colorSum1) + (colorSum2 * colorSum2)) > thresholdSq) ? 0 : 0xff;
      if (DoInversion) {
        b=255 - b;
      }
      imageIn.setPixelColor(x,y,r,g,b);
    }
  }
  return imageIn;
}
