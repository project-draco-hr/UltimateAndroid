{
  final Ring ring=mRing;
  final Animation finishRingAnimation=new Animation(){
    public void applyTransformation(    float interpolatedTime,    Transformation t){
      float targetRotation=(float)(Math.floor(ring.getStartingRotation() / MAX_PROGRESS_ARC) + 1f);
      final float startTrim=ring.getStartingStartTrim() + (ring.getStartingEndTrim() - ring.getStartingStartTrim()) * interpolatedTime;
      ring.setStartTrim(startTrim);
      final float rotation=ring.getStartingRotation() + ((targetRotation - ring.getStartingRotation()) * interpolatedTime);
      ring.setRotation(rotation);
      ring.setArrowScale(1 - interpolatedTime);
    }
  }
;
  finishRingAnimation.setInterpolator(EASE_INTERPOLATOR);
  finishRingAnimation.setDuration(ANIMATION_DURATION / 2);
  finishRingAnimation.setAnimationListener(new Animation.AnimationListener(){
    @Override public void onAnimationStart(    Animation animation){
    }
    @Override public void onAnimationEnd(    Animation animation){
      ring.goToNextColor();
      ring.storeOriginals();
      ring.setShowArrow(false);
      mParent.startAnimation(mAnimation);
    }
    @Override public void onAnimationRepeat(    Animation animation){
    }
  }
);
  final Animation animation=new Animation(){
    @Override public void applyTransformation(    float interpolatedTime,    Transformation t){
      final float minProgressArc=(float)Math.toRadians(ring.getStrokeWidth() / (2 * Math.PI * ring.getCenterRadius()));
      final float startingEndTrim=ring.getStartingEndTrim();
      final float startingTrim=ring.getStartingStartTrim();
      final float startingRotation=ring.getStartingRotation();
      final float minArc=MAX_PROGRESS_ARC - minProgressArc;
      final float endTrim=startingEndTrim + (minArc * START_CURVE_INTERPOLATOR.getInterpolation(interpolatedTime));
      ring.setEndTrim(endTrim);
      final float startTrim=startingTrim + (MAX_PROGRESS_ARC * END_CURVE_INTERPOLATOR.getInterpolation(interpolatedTime));
      ring.setStartTrim(startTrim);
      final float rotation=startingRotation + (0.25f * interpolatedTime);
      ring.setRotation(rotation);
      float groupRotation=((720.0f / NUM_POINTS) * interpolatedTime) + (720.0f * (mRotationCount / NUM_POINTS));
      setRotation(groupRotation);
    }
  }
;
  animation.setRepeatCount(Animation.INFINITE);
  animation.setRepeatMode(Animation.RESTART);
  animation.setInterpolator(LINEAR_INTERPOLATOR);
  animation.setDuration(ANIMATION_DURATION);
  animation.setAnimationListener(new Animation.AnimationListener(){
    @Override public void onAnimationStart(    Animation animation){
      mRotationCount=0;
    }
    @Override public void onAnimationEnd(    Animation animation){
    }
    @Override public void onAnimationRepeat(    Animation animation){
      ring.storeOriginals();
      ring.goToNextColor();
      ring.setStartTrim(ring.getEndTrim());
      mRotationCount=(mRotationCount + 1) % (NUM_POINTS);
    }
  }
);
  mFinishAnimation=finishRingAnimation;
  mAnimation=animation;
}
