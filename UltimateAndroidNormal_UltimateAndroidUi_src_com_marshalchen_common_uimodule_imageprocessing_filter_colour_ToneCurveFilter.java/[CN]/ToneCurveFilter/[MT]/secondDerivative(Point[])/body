{
  int n=points.length;
  if (n <= 1) {
    return null;
  }
  double[][] matrix=new double[n][3];
  double[] result=new double[n];
  matrix[0][1]=1;
  matrix[0][0]=0;
  matrix[0][2]=0;
  for (int i=1; i < n - 1; i++) {
    Point P1=points[(i - 1)];
    Point P2=points[i];
    Point P3=points[(i + 1)];
    matrix[i][0]=(double)(P2.x - P1.x) / 6;
    matrix[i][1]=(double)(P3.x - P1.x) / 3;
    matrix[i][2]=(double)(P3.x - P2.x) / 6;
    result[i]=(double)(P3.y - P2.y) / (P3.x - P2.x) - (double)(P2.y - P1.y) / (P2.x - P1.x);
  }
  result[0]=0;
  result[n - 1]=0;
  matrix[n - 1][1]=1;
  matrix[n - 1][0]=0;
  matrix[n - 1][2]=0;
  for (int i=1; i < n; i++) {
    double k=matrix[i][0] / matrix[i - 1][1];
    matrix[i][1]-=k * matrix[i - 1][2];
    matrix[i][0]=0;
    result[i]-=k * result[i - 1];
  }
  for (int i=n - 2; i >= 0; i--) {
    double k=matrix[i][2] / matrix[i + 1][1];
    matrix[i][1]-=k * matrix[i + 1][0];
    matrix[i][2]=0;
    result[i]-=k * result[i + 1];
  }
  double[] y2=new double[n];
  for (int i=0; i < n; i++)   y2[i]=result[i] / matrix[i][1];
  return y2;
}
