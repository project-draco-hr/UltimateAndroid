{
  int animationLevel=level == MAX_LEVEL ? 0 : level;
  int stateForLevel=(int)(animationLevel / MAX_LEVEL_PER_CIRCLE);
  mCurrentState=ProgressStates.values()[stateForLevel];
  resetColor(mCurrentState);
  int levelForCircle=(int)(animationLevel % MAX_LEVEL_PER_CIRCLE);
  boolean halfPassed;
  if (!goesBackward) {
    halfPassed=levelForCircle != (int)(animationLevel % (MAX_LEVEL_PER_CIRCLE / 2));
  }
 else {
    halfPassed=levelForCircle == (int)(animationLevel % (MAX_LEVEL_PER_CIRCLE / 2));
    levelForCircle=(int)(MAX_LEVEL_PER_CIRCLE - levelForCircle);
  }
  mFstHalfPaint.setColor(fstColor);
  mScndHalfPaint.setColor(scndColor);
  if (!halfPassed) {
    mAbovePaint.setColor(mScndHalfPaint.getColor());
  }
 else {
    mAbovePaint.setColor(mFstHalfPaint.getColor());
  }
  mAbovePaint.setAlpha(200 + (int)(55 * (levelForCircle / MAX_LEVEL_PER_CIRCLE)));
  mAxisValue=(int)(mControlPointMinimum + (mControlPointMaximum - mControlPointMinimum) * (levelForCircle / MAX_LEVEL_PER_CIRCLE));
}
