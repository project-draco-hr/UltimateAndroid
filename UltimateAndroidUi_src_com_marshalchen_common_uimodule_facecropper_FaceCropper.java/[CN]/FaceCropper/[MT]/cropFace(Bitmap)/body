{
  Bitmap fixedBitmap=BitmapUtils.forceEvenBitmapSize(original);
  fixedBitmap=BitmapUtils.forceConfig565(fixedBitmap);
  FaceDetector faceDetector=new FaceDetector(fixedBitmap.getWidth(),fixedBitmap.getHeight(),mMaxFaces);
  FaceDetector.Face[] faces=new FaceDetector.Face[mMaxFaces];
  int faceCount=faceDetector.findFaces(fixedBitmap,faces);
  Logs.d("face crop");
  if (faceCount == 0) {
    return fixedBitmap;
  }
  int initX=fixedBitmap.getWidth();
  int initY=fixedBitmap.getHeight();
  int endX=0;
  int endY=0;
  PointF centerFace=new PointF();
  for (int i=0; i < faceCount; i++) {
    FaceDetector.Face face=faces[i];
    int faceSize=(int)(face.eyesDistance() * 3);
    if (SizeMode.FaceMarginPx.equals(mSizeMode)) {
      faceSize+=mFaceMarginPx * 2;
    }
 else     if (SizeMode.EyeDistanceFactorMargin.equals(mSizeMode)) {
      faceSize+=face.eyesDistance() * mEyeDistanceFactorMargin;
    }
    faceSize=Math.max(faceSize,mFaceMinSize);
    face.getMidPoint(centerFace);
    int tInitX=(int)(centerFace.x - faceSize / 2);
    int tInitY=(int)(centerFace.y - faceSize / 2);
    tInitX=Math.max(0,tInitX);
    tInitY=Math.max(0,tInitY);
    int tEndX=tInitX + faceSize;
    int tEndY=tInitY + faceSize;
    tEndX=Math.min(tEndX,fixedBitmap.getWidth());
    tEndY=Math.min(tEndY,fixedBitmap.getHeight());
    initX=Math.min(initX,tInitX);
    initY=Math.min(initY,tInitY);
    endX=Math.max(endX,tEndX);
    endY=Math.max(endY,tEndY);
  }
  int sizeX=endX - initX;
  int sizeY=endY - initY;
  if (sizeX + initX > fixedBitmap.getWidth()) {
    sizeX=fixedBitmap.getWidth() - initX;
  }
  if (sizeY + initY > fixedBitmap.getHeight()) {
    sizeY=fixedBitmap.getHeight() - initY;
  }
  Bitmap croppedBitmap=Bitmap.createBitmap(fixedBitmap,initX,initY,sizeX,sizeY);
  if (fixedBitmap != croppedBitmap) {
    fixedBitmap.recycle();
  }
  return croppedBitmap;
}
