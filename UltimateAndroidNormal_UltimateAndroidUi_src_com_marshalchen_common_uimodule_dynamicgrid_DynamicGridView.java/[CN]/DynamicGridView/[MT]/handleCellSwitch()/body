{
  final int deltaY=mLastEventY - mDownY;
  final int deltaX=mLastEventX - mDownX;
  final int deltaYTotal=mHoverCellOriginalBounds.centerY() + mTotalOffsetY + deltaY;
  final int deltaXTotal=mHoverCellOriginalBounds.centerX() + mTotalOffsetX + deltaX;
  View mobileView=getViewForId(mMobileItemId);
  View targetView=null;
  float vX=0;
  float vY=0;
  Point mobileColumnRowPair=getColumnAndRowForView(mobileView);
  for (  Long id : idList) {
    View view=getViewForId(id);
    if (view != null) {
      Point targetColumnRowPair=getColumnAndRowForView(view);
      if ((aboveRight(targetColumnRowPair,mobileColumnRowPair) && deltaYTotal < view.getBottom() && deltaXTotal > view.getLeft() || aboveLeft(targetColumnRowPair,mobileColumnRowPair) && deltaYTotal < view.getBottom() && deltaXTotal < view.getRight() || belowRight(targetColumnRowPair,mobileColumnRowPair) && deltaYTotal > view.getTop() && deltaXTotal > view.getLeft() || belowLeft(targetColumnRowPair,mobileColumnRowPair) && deltaYTotal > view.getTop() && deltaXTotal < view.getRight() || above(targetColumnRowPair,mobileColumnRowPair) && deltaYTotal < view.getBottom()) || below(targetColumnRowPair,mobileColumnRowPair) && deltaYTotal > view.getTop() || right(targetColumnRowPair,mobileColumnRowPair) && deltaXTotal > view.getLeft() || left(targetColumnRowPair,mobileColumnRowPair) && deltaXTotal < view.getRight()) {
        float xDiff=Math.abs(DynamicGridUtils.getViewX(view) - DynamicGridUtils.getViewX(mobileView));
        float yDiff=Math.abs(DynamicGridUtils.getViewY(view) - DynamicGridUtils.getViewY(mobileView));
        if (xDiff >= vX && yDiff >= vY) {
          vX=xDiff;
          vY=yDiff;
          targetView=view;
        }
      }
    }
  }
  if (targetView != null) {
    final int originalPosition=getPositionForView(mobileView);
    int targetPosition=getPositionForView(targetView);
    if (targetPosition == INVALID_POSITION) {
      updateNeighborViewsForId(mMobileItemId);
      return;
    }
    reorderElements(originalPosition,targetPosition);
    if (undoSupportEnabled) {
      currentModification.addTransition(originalPosition,targetPosition);
    }
    mDownY=mLastEventY;
    mDownX=mLastEventX;
    mobileView.setVisibility(View.VISIBLE);
    if (isPostHoneycomb()) {
      targetView.setVisibility(View.INVISIBLE);
    }
    updateNeighborViewsForId(mMobileItemId);
    final ViewTreeObserver observer=getViewTreeObserver();
    final int finalTargetPosition=targetPosition;
    if (isPostHoneycomb() && observer != null) {
      observer.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
        @Override public boolean onPreDraw(){
          observer.removeOnPreDrawListener(this);
          mTotalOffsetY+=deltaY;
          mTotalOffsetX+=deltaX;
          animateReorder(originalPosition,finalTargetPosition);
          return true;
        }
      }
);
    }
 else {
      mTotalOffsetY+=deltaY;
      mTotalOffsetX+=deltaX;
    }
  }
}
