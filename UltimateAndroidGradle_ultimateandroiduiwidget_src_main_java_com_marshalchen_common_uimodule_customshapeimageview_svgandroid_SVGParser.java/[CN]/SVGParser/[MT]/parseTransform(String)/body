{
  if (s.startsWith("matrix(")) {
    NumberParse np=parseNumbers(s.substring("matrix(".length()));
    if (np.numbers.size() == 6) {
      Matrix matrix=new Matrix();
      matrix.setValues(new float[]{np.numbers.get(0),np.numbers.get(2),np.numbers.get(4),np.numbers.get(1),np.numbers.get(3),np.numbers.get(5),0,0,1});
      return matrix;
    }
  }
 else   if (s.startsWith("translate(")) {
    NumberParse np=parseNumbers(s.substring("translate(".length()));
    if (np.numbers.size() > 0) {
      float tx=np.numbers.get(0);
      float ty=0;
      if (np.numbers.size() > 1) {
        ty=np.numbers.get(1);
      }
      Matrix matrix=new Matrix();
      matrix.postTranslate(tx,ty);
      return matrix;
    }
  }
 else   if (s.startsWith("scale(")) {
    NumberParse np=parseNumbers(s.substring("scale(".length()));
    if (np.numbers.size() > 0) {
      float sx=np.numbers.get(0);
      float sy=0;
      if (np.numbers.size() > 1) {
        sy=np.numbers.get(1);
      }
      Matrix matrix=new Matrix();
      matrix.postScale(sx,sy);
      return matrix;
    }
  }
 else   if (s.startsWith("skewX(")) {
    NumberParse np=parseNumbers(s.substring("skewX(".length()));
    if (np.numbers.size() > 0) {
      float angle=np.numbers.get(0);
      Matrix matrix=new Matrix();
      matrix.postSkew((float)Math.tan(angle),0);
      return matrix;
    }
  }
 else   if (s.startsWith("skewY(")) {
    NumberParse np=parseNumbers(s.substring("skewY(".length()));
    if (np.numbers.size() > 0) {
      float angle=np.numbers.get(0);
      Matrix matrix=new Matrix();
      matrix.postSkew(0,(float)Math.tan(angle));
      return matrix;
    }
  }
 else   if (s.startsWith("rotate(")) {
    NumberParse np=parseNumbers(s.substring("rotate(".length()));
    if (np.numbers.size() > 0) {
      float angle=np.numbers.get(0);
      float cx=0;
      float cy=0;
      if (np.numbers.size() > 2) {
        cx=np.numbers.get(1);
        cy=np.numbers.get(2);
      }
      Matrix matrix=new Matrix();
      matrix.postTranslate(cx,cy);
      matrix.postRotate(angle);
      matrix.postTranslate(-cx,-cy);
      return matrix;
    }
  }
  return null;
}
