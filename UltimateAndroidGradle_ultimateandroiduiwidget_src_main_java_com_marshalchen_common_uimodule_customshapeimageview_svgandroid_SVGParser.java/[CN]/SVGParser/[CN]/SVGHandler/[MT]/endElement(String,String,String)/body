{
  if (localName.equals("svg")) {
    picture.endRecording();
  }
 else   if (localName.equals("linearGradient")) {
    if (gradient.id != null) {
      if (gradient.xlink != null) {
        Gradient parent=gradientRefMap.get(gradient.xlink);
        if (parent != null) {
          gradient=parent.createChild(gradient);
        }
      }
      int[] colors=new int[gradient.colors.size()];
      for (int i=0; i < colors.length; i++) {
        colors[i]=gradient.colors.get(i);
      }
      float[] positions=new float[gradient.positions.size()];
      for (int i=0; i < positions.length; i++) {
        positions[i]=gradient.positions.get(i);
      }
      if (colors.length == 0) {
        Log.d("BAD","BAD");
      }
      LinearGradient g=new LinearGradient(gradient.x1,gradient.y1,gradient.x2,gradient.y2,colors,positions,Shader.TileMode.CLAMP);
      if (gradient.matrix != null) {
        g.setLocalMatrix(gradient.matrix);
      }
      gradientMap.put(gradient.id,g);
      gradientRefMap.put(gradient.id,gradient);
    }
  }
 else   if (localName.equals("radialGradient")) {
    if (gradient.id != null) {
      if (gradient.xlink != null) {
        Gradient parent=gradientRefMap.get(gradient.xlink);
        if (parent != null) {
          gradient=parent.createChild(gradient);
        }
      }
      int[] colors=new int[gradient.colors.size()];
      for (int i=0; i < colors.length; i++) {
        colors[i]=gradient.colors.get(i);
      }
      float[] positions=new float[gradient.positions.size()];
      for (int i=0; i < positions.length; i++) {
        positions[i]=gradient.positions.get(i);
      }
      if (gradient.xlink != null) {
        Gradient parent=gradientRefMap.get(gradient.xlink);
        if (parent != null) {
          gradient=parent.createChild(gradient);
        }
      }
      RadialGradient g=new RadialGradient(gradient.x,gradient.y,gradient.radius,colors,positions,Shader.TileMode.CLAMP);
      if (gradient.matrix != null) {
        g.setLocalMatrix(gradient.matrix);
      }
      gradientMap.put(gradient.id,g);
      gradientRefMap.put(gradient.id,gradient);
    }
  }
 else   if (localName.equals("g")) {
    if (boundsMode) {
      boundsMode=false;
    }
    if (hidden) {
      hiddenLevel--;
      if (hiddenLevel == 0) {
        hidden=false;
      }
    }
    gradientMap.clear();
  }
}
