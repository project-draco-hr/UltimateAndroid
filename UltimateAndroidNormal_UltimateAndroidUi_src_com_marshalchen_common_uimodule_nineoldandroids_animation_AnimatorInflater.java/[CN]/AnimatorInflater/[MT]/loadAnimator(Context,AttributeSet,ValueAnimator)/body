{
  TypedArray a=context.obtainStyledAttributes(attrs,Animator);
  long duration=a.getInt(Animator_duration,0);
  long startDelay=a.getInt(Animator_startOffset,0);
  int valueType=a.getInt(Animator_valueType,VALUE_TYPE_FLOAT);
  if (anim == null) {
    anim=new ValueAnimator();
  }
  int valueFromIndex=Animator_valueFrom;
  int valueToIndex=Animator_valueTo;
  boolean getFloats=(valueType == VALUE_TYPE_FLOAT);
  TypedValue tvFrom=a.peekValue(valueFromIndex);
  boolean hasFrom=(tvFrom != null);
  int fromType=hasFrom ? tvFrom.type : 0;
  TypedValue tvTo=a.peekValue(valueToIndex);
  boolean hasTo=(tvTo != null);
  int toType=hasTo ? tvTo.type : 0;
  if ((hasFrom && (fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) || (hasTo && (toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT))) {
    getFloats=false;
    anim.setEvaluator(new ArgbEvaluator());
  }
  if (getFloats) {
    float valueFrom;
    float valueTo;
    if (hasFrom) {
      if (fromType == TypedValue.TYPE_DIMENSION) {
        valueFrom=a.getDimension(valueFromIndex,0f);
      }
 else {
        valueFrom=a.getFloat(valueFromIndex,0f);
      }
      if (hasTo) {
        if (toType == TypedValue.TYPE_DIMENSION) {
          valueTo=a.getDimension(valueToIndex,0f);
        }
 else {
          valueTo=a.getFloat(valueToIndex,0f);
        }
        anim.setFloatValues(valueFrom,valueTo);
      }
 else {
        anim.setFloatValues(valueFrom);
      }
    }
 else {
      if (toType == TypedValue.TYPE_DIMENSION) {
        valueTo=a.getDimension(valueToIndex,0f);
      }
 else {
        valueTo=a.getFloat(valueToIndex,0f);
      }
      anim.setFloatValues(valueTo);
    }
  }
 else {
    int valueFrom;
    int valueTo;
    if (hasFrom) {
      if (fromType == TypedValue.TYPE_DIMENSION) {
        valueFrom=(int)a.getDimension(valueFromIndex,0f);
      }
 else       if ((fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) {
        valueFrom=a.getColor(valueFromIndex,0);
      }
 else {
        valueFrom=a.getInt(valueFromIndex,0);
      }
      if (hasTo) {
        if (toType == TypedValue.TYPE_DIMENSION) {
          valueTo=(int)a.getDimension(valueToIndex,0f);
        }
 else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {
          valueTo=a.getColor(valueToIndex,0);
        }
 else {
          valueTo=a.getInt(valueToIndex,0);
        }
        anim.setIntValues(valueFrom,valueTo);
      }
 else {
        anim.setIntValues(valueFrom);
      }
    }
 else {
      if (hasTo) {
        if (toType == TypedValue.TYPE_DIMENSION) {
          valueTo=(int)a.getDimension(valueToIndex,0f);
        }
 else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {
          valueTo=a.getColor(valueToIndex,0);
        }
 else {
          valueTo=a.getInt(valueToIndex,0);
        }
        anim.setIntValues(valueTo);
      }
    }
  }
  anim.setDuration(duration);
  anim.setStartDelay(startDelay);
  if (a.hasValue(Animator_repeatCount)) {
    anim.setRepeatCount(a.getInt(Animator_repeatCount,0));
  }
  if (a.hasValue(Animator_repeatMode)) {
    anim.setRepeatMode(a.getInt(Animator_repeatMode,ValueAnimator.RESTART));
  }
  final int resID=a.getResourceId(Animator_interpolator,0);
  if (resID > 0) {
    anim.setInterpolator(AnimationUtils.loadInterpolator(context,resID));
  }
  a.recycle();
  return anim;
}
