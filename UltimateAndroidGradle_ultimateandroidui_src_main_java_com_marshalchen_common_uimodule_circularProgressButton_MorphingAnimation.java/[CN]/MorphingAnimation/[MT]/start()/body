{
  ValueAnimator widthAnimation=ValueAnimator.ofInt(mFromWidth,mToWidth);
  final GradientDrawable gradientDrawable=mDrawable.getGradientDrawable();
  widthAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      Integer value=(Integer)animation.getAnimatedValue();
      int leftOffset;
      int rightOffset;
      int padding;
      if (mFromWidth > mToWidth) {
        leftOffset=(mFromWidth - value) / 2;
        rightOffset=mFromWidth - leftOffset;
        padding=(int)(mPadding * animation.getAnimatedFraction());
      }
 else {
        leftOffset=(mToWidth - value) / 2;
        rightOffset=mToWidth - leftOffset;
        padding=(int)(mPadding - mPadding * animation.getAnimatedFraction());
      }
      gradientDrawable.setBounds(leftOffset + padding,padding,rightOffset - padding,mView.getHeight() - padding);
    }
  }
);
  ObjectAnimator bgColorAnimation=ObjectAnimator.ofInt(gradientDrawable,"color",mFromColor,mToColor);
  bgColorAnimation.setEvaluator(new ArgbEvaluator());
  ObjectAnimator strokeColorAnimation=ObjectAnimator.ofInt(mDrawable,"strokeColor",mFromStrokeColor,mToStrokeColor);
  strokeColorAnimation.setEvaluator(new ArgbEvaluator());
  ObjectAnimator cornerAnimation=ObjectAnimator.ofFloat(gradientDrawable,"cornerRadius",mFromCornerRadius,mToCornerRadius);
  AnimatorSet animatorSet=new AnimatorSet();
  animatorSet.setDuration(mDuration);
  animatorSet.playTogether(widthAnimation,bgColorAnimation,strokeColorAnimation,cornerAnimation);
  animatorSet.addListener(new Animator.AnimatorListener(){
    @Override public void onAnimationStart(    Animator animation){
    }
    @Override public void onAnimationEnd(    Animator animation){
      if (mListener != null) {
        mListener.onAnimationEnd();
      }
    }
    @Override public void onAnimationCancel(    Animator animation){
    }
    @Override public void onAnimationRepeat(    Animator animation){
    }
  }
);
  animatorSet.start();
}
