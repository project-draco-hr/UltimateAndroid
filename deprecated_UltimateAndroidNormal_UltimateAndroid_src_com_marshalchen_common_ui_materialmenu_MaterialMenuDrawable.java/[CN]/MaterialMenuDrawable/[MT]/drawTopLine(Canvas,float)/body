{
  canvas.save();
  float rotation=0, pivotX=0, pivotY=0;
  float rotation2=0;
  float pivotX2=width / 2 + dip3 / 2;
  float pivotY2=topPadding + dip2;
  float startX=sidePadding;
  float startY=topPadding + dip2;
  float stopX=width - sidePadding;
  float stopY=topPadding + dip2;
  int alpha=255;
switch (animationState) {
case BURGER_ARROW:
    if (isMorphingForward()) {
      rotation=ratio * ARROW_BOT_LINE_ANGLE;
    }
 else {
      rotation=ARROW_BOT_LINE_ANGLE + (1 - ratio) * ARROW_TOP_LINE_ANGLE;
    }
  pivotX=width / 2;
pivotY=height / 2;
stopX-=resolveStrokeModifier(ratio);
startX+=dip3 * ratio;
break;
case BURGER_X:
rotation=X_TOP_LINE_ANGLE * ratio;
rotation2=X_ROTATION_ANGLE * ratio;
pivotX=sidePadding + dip4;
pivotY=topPadding + dip3;
stopX+=dip3 * ratio;
break;
case ARROW_X:
rotation=ARROW_BOT_LINE_ANGLE + (X_TOP_LINE_ANGLE - ARROW_BOT_LINE_ANGLE) * ratio;
rotation2=X_ROTATION_ANGLE * ratio;
pivotX=width / 2 + (sidePadding + dip4 - width / 2) * ratio;
pivotY=height / 2 + (topPadding + dip3 - height / 2) * ratio;
stopX-=resolveStrokeModifier(ratio);
startX+=dip3 * (1 - ratio);
break;
case ARROW_CHECK:
alpha=(int)((1 - ratio) * 255);
rotation=ARROW_BOT_LINE_ANGLE;
pivotX=width / 2;
pivotY=height / 2;
stopX-=resolveStrokeModifier(1);
startX+=dip3;
break;
case BURGER_CHECK:
alpha=(int)((1 - ratio) * 255);
break;
case X_CHECK:
rotation=X_TOP_LINE_ANGLE;
rotation2=X_ROTATION_ANGLE;
pivotX=sidePadding + dip4;
pivotY=topPadding + dip3;
stopX+=dip3;
alpha=(int)((1 - ratio) * 255);
break;
}
iconPaint.setAlpha(alpha);
canvas.rotate(rotation,pivotX,pivotY);
canvas.rotate(rotation2,pivotX2,pivotY2);
canvas.drawLine(startX,startY,stopX,stopY,iconPaint);
iconPaint.setAlpha(255);
}
