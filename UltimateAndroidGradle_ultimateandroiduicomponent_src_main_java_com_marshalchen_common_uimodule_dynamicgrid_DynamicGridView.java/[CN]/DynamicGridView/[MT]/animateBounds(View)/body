{
  TypeEvaluator<Rect> sBoundEvaluator=new TypeEvaluator<Rect>(){
    public Rect evaluate(    float fraction,    Rect startValue,    Rect endValue){
      return new Rect(interpolate(startValue.left,endValue.left,fraction),interpolate(startValue.top,endValue.top,fraction),interpolate(startValue.right,endValue.right,fraction),interpolate(startValue.bottom,endValue.bottom,fraction));
    }
    public int interpolate(    int start,    int end,    float fraction){
      return (int)(start + fraction * (end - start));
    }
  }
;
  ObjectAnimator hoverViewAnimator=ObjectAnimator.ofObject(mHoverCell,"bounds",sBoundEvaluator,mHoverCellCurrentBounds);
  hoverViewAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      invalidate();
    }
  }
);
  hoverViewAnimator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      mHoverAnimation=true;
      updateEnableState();
    }
    @Override public void onAnimationEnd(    Animator animation){
      mHoverAnimation=false;
      updateEnableState();
      reset(mobileView);
    }
  }
);
  hoverViewAnimator.start();
}
