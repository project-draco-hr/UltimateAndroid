{
  ItemInfo oldCurInfo=null;
  int focusDirection=View.FOCUS_FORWARD;
  if (mCurItem != newCurrentItem) {
    focusDirection=mCurItem < newCurrentItem ? View.FOCUS_RIGHT : View.FOCUS_LEFT;
    oldCurInfo=infoForPosition(mCurItem);
    mCurItem=newCurrentItem;
  }
  if (mAdapter == null) {
    sortChildDrawingOrder();
    return;
  }
  if (mPopulatePending) {
    if (DEBUG)     Log.i(TAG,"populate is pending, skipping for now...");
    sortChildDrawingOrder();
    return;
  }
  if (getWindowToken() == null) {
    return;
  }
  mAdapter.startUpdate(this);
  final int pageLimit=mOffscreenPageLimit;
  final int startPos=Math.max(0,mCurItem - pageLimit);
  final int N=mAdapter.getCount();
  final int endPos=Math.min(N - 1,mCurItem + pageLimit);
  if (N != mExpectedAdapterCount) {
    String resName;
    try {
      resName=getResources().getResourceName(getId());
    }
 catch (    Resources.NotFoundException e) {
      resName=Integer.toHexString(getId());
    }
    throw new IllegalStateException("The application's PagerAdapter changed the adapter's" + " contents without calling PagerAdapter#notifyDataSetChanged!" + " Expected adapter item count: " + mExpectedAdapterCount + ", found: "+ N+ " Pager id: "+ resName+ " Pager class: "+ getClass()+ " Problematic adapter: "+ mAdapter.getClass());
  }
  int curIndex=-1;
  ItemInfo curItem=null;
  for (curIndex=0; curIndex < mItems.size(); curIndex++) {
    final ItemInfo ii=mItems.get(curIndex);
    if (ii.position >= mCurItem) {
      if (ii.position == mCurItem)       curItem=ii;
      break;
    }
  }
  if (curItem == null && N > 0) {
    curItem=addNewItem(mCurItem,curIndex);
  }
  if (curItem != null) {
    float extraWidthLeft=0.f;
    int itemIndex=curIndex - 1;
    ItemInfo ii=itemIndex >= 0 ? mItems.get(itemIndex) : null;
    final int clientWidth=getClientWidth();
    final float leftWidthNeeded=clientWidth <= 0 ? 0 : 2.f - curItem.widthFactor + (float)getPaddingLeft() / (float)clientWidth;
    for (int pos=mCurItem - 1; pos >= 0; pos--) {
      if (extraWidthLeft >= leftWidthNeeded && pos < startPos) {
        if (ii == null) {
          break;
        }
        if (pos == ii.position && !ii.scrolling) {
          mItems.remove(itemIndex);
          mAdapter.destroyItem(this,pos,ii.object);
          if (DEBUG) {
            Log.i(TAG,"populate() - destroyItem() with pos: " + pos + " view: "+ ((View)ii.object));
          }
          itemIndex--;
          curIndex--;
          ii=itemIndex >= 0 ? mItems.get(itemIndex) : null;
        }
      }
 else       if (ii != null && pos == ii.position) {
        extraWidthLeft+=ii.widthFactor;
        itemIndex--;
        ii=itemIndex >= 0 ? mItems.get(itemIndex) : null;
      }
 else {
        ii=addNewItem(pos,itemIndex + 1);
        extraWidthLeft+=ii.widthFactor;
        curIndex++;
        ii=itemIndex >= 0 ? mItems.get(itemIndex) : null;
      }
    }
    float extraWidthRight=curItem.widthFactor;
    itemIndex=curIndex + 1;
    if (extraWidthRight < 2.f) {
      ii=itemIndex < mItems.size() ? mItems.get(itemIndex) : null;
      final float rightWidthNeeded=clientWidth <= 0 ? 0 : (float)getPaddingRight() / (float)clientWidth + 2.f;
      for (int pos=mCurItem + 1; pos < N; pos++) {
        if (extraWidthRight >= rightWidthNeeded && pos > endPos) {
          if (ii == null) {
            break;
          }
          if (pos == ii.position && !ii.scrolling) {
            mItems.remove(itemIndex);
            mAdapter.destroyItem(this,pos,ii.object);
            if (DEBUG) {
              Log.i(TAG,"populate() - destroyItem() with pos: " + pos + " view: "+ ((View)ii.object));
            }
            ii=itemIndex < mItems.size() ? mItems.get(itemIndex) : null;
          }
        }
 else         if (ii != null && pos == ii.position) {
          extraWidthRight+=ii.widthFactor;
          itemIndex++;
          ii=itemIndex < mItems.size() ? mItems.get(itemIndex) : null;
        }
 else {
          ii=addNewItem(pos,itemIndex);
          itemIndex++;
          extraWidthRight+=ii.widthFactor;
          ii=itemIndex < mItems.size() ? mItems.get(itemIndex) : null;
        }
      }
    }
    calculatePageOffsets(curItem,curIndex,oldCurInfo);
  }
  if (DEBUG) {
    Log.i(TAG,"Current page list:");
    for (int i=0; i < mItems.size(); i++) {
      Log.i(TAG,"#" + i + ": page "+ mItems.get(i).position);
    }
  }
  mAdapter.setPrimaryItem(this,mCurItem,curItem != null ? curItem.object : null);
  mAdapter.finishUpdate(this);
  final int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    lp.childIndex=i;
    if (!lp.isDecor && lp.widthFactor == 0.f) {
      final ItemInfo ii=infoForChild(child);
      if (ii != null) {
        lp.widthFactor=ii.widthFactor;
        lp.position=ii.position;
      }
    }
  }
  sortChildDrawingOrder();
  if (hasFocus()) {
    View currentFocused=findFocus();
    ItemInfo ii=currentFocused != null ? infoForAnyChild(currentFocused) : null;
    if (ii == null || ii.position != mCurItem) {
      for (int i=0; i < getChildCount(); i++) {
        View child=getChildAt(i);
        ii=infoForChild(child);
        if (ii != null && ii.position == mCurItem) {
          if (child.requestFocus(focusDirection)) {
            break;
          }
        }
      }
    }
  }
}
