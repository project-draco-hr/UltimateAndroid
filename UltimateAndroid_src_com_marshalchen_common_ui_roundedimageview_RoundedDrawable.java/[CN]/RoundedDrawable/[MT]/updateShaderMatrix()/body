{
  float scale;
  float dx;
  float dy;
switch (mScaleType) {
case CENTER:
    mBorderRect.set(mBounds);
  mBorderRect.inset((mBorderWidth) / 2,(mBorderWidth) / 2);
mShaderMatrix.set(null);
mShaderMatrix.setTranslate((int)((mBorderRect.width() - mBitmapWidth) * 0.5f + 0.5f),(int)((mBorderRect.height() - mBitmapHeight) * 0.5f + 0.5f));
break;
case CENTER_CROP:
mBorderRect.set(mBounds);
mBorderRect.inset((mBorderWidth) / 2,(mBorderWidth) / 2);
mShaderMatrix.set(null);
dx=0;
dy=0;
if (mBitmapWidth * mBorderRect.height() > mBorderRect.width() * mBitmapHeight) {
scale=mBorderRect.height() / (float)mBitmapHeight;
dx=(mBorderRect.width() - mBitmapWidth * scale) * 0.5f;
}
 else {
scale=mBorderRect.width() / (float)mBitmapWidth;
dy=(mBorderRect.height() - mBitmapHeight * scale) * 0.5f;
}
mShaderMatrix.setScale(scale,scale);
mShaderMatrix.postTranslate((int)(dx + 0.5f) + mBorderWidth,(int)(dy + 0.5f) + mBorderWidth);
break;
case CENTER_INSIDE:
mShaderMatrix.set(null);
if (mBitmapWidth <= mBounds.width() && mBitmapHeight <= mBounds.height()) {
scale=1.0f;
}
 else {
scale=Math.min(mBounds.width() / (float)mBitmapWidth,mBounds.height() / (float)mBitmapHeight);
}
dx=(int)((mBounds.width() - mBitmapWidth * scale) * 0.5f + 0.5f);
dy=(int)((mBounds.height() - mBitmapHeight * scale) * 0.5f + 0.5f);
mShaderMatrix.setScale(scale,scale);
mShaderMatrix.postTranslate(dx,dy);
mBorderRect.set(mBitmapRect);
mShaderMatrix.mapRect(mBorderRect);
mBorderRect.inset((mBorderWidth) / 2,(mBorderWidth) / 2);
mShaderMatrix.setRectToRect(mBitmapRect,mBorderRect,Matrix.ScaleToFit.FILL);
break;
default :
case FIT_CENTER:
mBorderRect.set(mBitmapRect);
mShaderMatrix.setRectToRect(mBitmapRect,mBounds,Matrix.ScaleToFit.CENTER);
mShaderMatrix.mapRect(mBorderRect);
mBorderRect.inset((mBorderWidth) / 2,(mBorderWidth) / 2);
mShaderMatrix.setRectToRect(mBitmapRect,mBorderRect,Matrix.ScaleToFit.FILL);
break;
case FIT_END:
mBorderRect.set(mBitmapRect);
mShaderMatrix.setRectToRect(mBitmapRect,mBounds,Matrix.ScaleToFit.END);
mShaderMatrix.mapRect(mBorderRect);
mBorderRect.inset((mBorderWidth) / 2,(mBorderWidth) / 2);
mShaderMatrix.setRectToRect(mBitmapRect,mBorderRect,Matrix.ScaleToFit.FILL);
break;
case FIT_START:
mBorderRect.set(mBitmapRect);
mShaderMatrix.setRectToRect(mBitmapRect,mBounds,Matrix.ScaleToFit.START);
mShaderMatrix.mapRect(mBorderRect);
mBorderRect.inset((mBorderWidth) / 2,(mBorderWidth) / 2);
mShaderMatrix.setRectToRect(mBitmapRect,mBorderRect,Matrix.ScaleToFit.FILL);
break;
case FIT_XY:
mBorderRect.set(mBounds);
mBorderRect.inset((mBorderWidth) / 2,(mBorderWidth) / 2);
mShaderMatrix.set(null);
mShaderMatrix.setRectToRect(mBitmapRect,mBorderRect,Matrix.ScaleToFit.FILL);
break;
}
mDrawableRect.set(mBorderRect);
mBitmapShader.setLocalMatrix(mShaderMatrix);
}
