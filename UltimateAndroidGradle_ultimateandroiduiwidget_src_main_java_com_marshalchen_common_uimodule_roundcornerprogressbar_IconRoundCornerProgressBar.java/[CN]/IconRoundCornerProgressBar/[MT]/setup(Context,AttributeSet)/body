{
  int color;
  TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.RoundCornerProgress);
  DisplayMetrics metrics=getContext().getResources().getDisplayMetrics();
  radius=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,radius,metrics);
  radius=(int)typedArray.getDimension(R.styleable.RoundCornerProgress_rcp_backgroundRadius,radius);
  padding=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,padding,metrics);
  padding=(int)typedArray.getDimension(R.styleable.RoundCornerProgress_rcp_backgroundPadding,padding);
  imageIcon=(ImageView)findViewById(R.id.round_corner_progress_icon);
  imageIcon.setScaleType(ScaleType.CENTER_CROP);
  if (!isIconSetBeforeDraw) {
    int iconResource=(int)typedArray.getResourceId(R.styleable.RoundCornerProgress_rcp_iconSrc,R.drawable.round_corner_progress_icon);
    imageIcon.setImageResource(iconResource);
  }
  iconSize=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,iconSize,metrics);
  iconSize=(int)typedArray.getDimension(R.styleable.RoundCornerProgress_rcp_iconSize,iconSize);
  imageIcon.setLayoutParams(new LayoutParams(iconSize,iconSize));
  layoutHeader=(LinearLayout)findViewById(R.id.round_corner_progress_header);
  iconPadding=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,iconPadding,metrics);
  iconPadding=(int)typedArray.getDimension(R.styleable.RoundCornerProgress_rcp_iconPadding,iconPadding);
  layoutHeader.setPadding(iconPadding,iconPadding,iconPadding,iconPadding);
  if (!isHeaderColorSetBeforeDraw) {
    color=typedArray.getColor(R.styleable.RoundCornerProgress_rcp_headerColor,headerColor);
    setHeaderColor(color);
  }
  ViewTreeObserver observer=layoutHeader.getViewTreeObserver();
  observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      layoutHeader.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
        headerWidth=layoutHeader.getMeasuredWidth();
      }
 else {
        headerWidth=layoutHeader.getWidth();
      }
      if (backgroundWidth > 0)       setProgress(progress);
    }
  }
);
  layoutBackground=(LinearLayout)findViewById(R.id.round_corner_progress_background);
  layoutBackground.setPadding(padding,padding,padding,padding);
  if (!isBackgroundColorSetBeforeDraw) {
    color=typedArray.getColor(R.styleable.RoundCornerProgress_rcp_backgroundColor,backgroundColor);
    setBackgroundColor(color);
  }
  observer=layoutBackground.getViewTreeObserver();
  observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      layoutBackground.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
        backgroundWidth=layoutBackground.getMeasuredWidth();
      }
 else {
        backgroundWidth=layoutBackground.getWidth();
      }
      if (headerWidth > 0)       setProgress(progress);
    }
  }
);
  layoutProgress=(LinearLayout)findViewById(R.id.round_corner_progress_progress);
  if (!isProgressColorSetBeforeDraw) {
    color=typedArray.getColor(R.styleable.RoundCornerProgress_rcp_progressColor,progressColor);
    setProgressColor(color);
  }
  if (!isMaxProgressSetBeforeDraw) {
    max=typedArray.getInt(R.styleable.RoundCornerProgress_rcp_max,0);
  }
  if (!isProgressSetBeforeDraw) {
    progress=typedArray.getInt(R.styleable.RoundCornerProgress_rcp_progress,0);
  }
  typedArray.recycle();
}
