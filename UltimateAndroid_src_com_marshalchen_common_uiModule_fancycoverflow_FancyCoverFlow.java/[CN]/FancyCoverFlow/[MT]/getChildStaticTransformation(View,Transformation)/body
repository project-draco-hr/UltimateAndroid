{
  FancyCoverFlowItemWrapper item=(FancyCoverFlowItemWrapper)child;
  if (android.os.Build.VERSION.SDK_INT >= 16) {
    item.invalidate();
  }
  final int coverFlowWidth=this.getWidth();
  final int coverFlowCenter=coverFlowWidth / 2;
  final int childWidth=item.getWidth();
  final int childHeight=item.getHeight();
  final int childCenter=item.getLeft() + childWidth / 2;
  final int actionDistance=(this.actionDistance == ACTION_DISTANCE_AUTO) ? (int)((coverFlowWidth + childWidth) / 2.0f) : this.actionDistance;
  final float effectsAmount=Math.min(1.0f,Math.max(-1.0f,(1.0f / actionDistance) * (childCenter - coverFlowCenter)));
  t.clear();
  t.setTransformationType(Transformation.TYPE_BOTH);
  if (this.unselectedAlpha != 1) {
    final float alphaAmount=(this.unselectedAlpha - 1) * Math.abs(effectsAmount) + 1;
    t.setAlpha(alphaAmount);
  }
  if (this.unselectedSaturation != 1) {
    final float saturationAmount=(this.unselectedSaturation - 1) * Math.abs(effectsAmount) + 1;
    item.setSaturation(saturationAmount);
  }
  final Matrix imageMatrix=t.getMatrix();
  if (this.maxRotation != 0) {
    final int rotationAngle=(int)(-effectsAmount * this.maxRotation);
    this.transformationCamera.save();
    this.transformationCamera.rotateY(rotationAngle);
    this.transformationCamera.getMatrix(imageMatrix);
    this.transformationCamera.restore();
  }
  if (this.unselectedScale != 1) {
    final float zoomAmount=(this.unselectedScale - 1) * Math.abs(effectsAmount) + 1;
    final float translateX=childWidth / 2.0f;
    final float translateY=childHeight * this.scaleDownGravity;
    imageMatrix.preTranslate(-translateX,-translateY);
    imageMatrix.postScale(zoomAmount,zoomAmount);
    imageMatrix.postTranslate(translateX,translateY);
  }
  return true;
}
