{
  double resultWidth;
  double resultHeight;
  int resultX;
  int resultY;
  double viewToBitmapWidthRatio=Double.POSITIVE_INFINITY;
  double viewToBitmapHeightRatio=Double.POSITIVE_INFINITY;
  if (viewWidth < bitmapWidth) {
    viewToBitmapWidthRatio=(double)viewWidth / (double)bitmapWidth;
  }
  if (viewHeight < bitmapHeight) {
    viewToBitmapHeightRatio=(double)viewHeight / (double)bitmapHeight;
  }
  if (viewToBitmapWidthRatio != Double.POSITIVE_INFINITY || viewToBitmapHeightRatio != Double.POSITIVE_INFINITY) {
    if (viewToBitmapWidthRatio <= viewToBitmapHeightRatio) {
      resultWidth=viewWidth;
      resultHeight=(bitmapHeight * resultWidth / bitmapWidth);
    }
 else {
      resultHeight=viewHeight;
      resultWidth=(bitmapWidth * resultHeight / bitmapHeight);
    }
  }
 else {
    resultHeight=bitmapHeight;
    resultWidth=bitmapWidth;
  }
  if (resultWidth == viewWidth) {
    resultX=0;
    resultY=(int)Math.round((viewHeight - resultHeight) / 2);
  }
 else   if (resultHeight == viewHeight) {
    resultX=(int)Math.round((viewWidth - resultWidth) / 2);
    resultY=0;
  }
 else {
    resultX=(int)Math.round((viewWidth - resultWidth) / 2);
    resultY=(int)Math.round((viewHeight - resultHeight) / 2);
  }
  final Rect result=new Rect(resultX,resultY,resultX + (int)Math.ceil(resultWidth),resultY + (int)Math.ceil(resultHeight));
  return result;
}
