{
  boolean isAtRest=isAtRest();
  if (isAtRest && mWasAtRest) {
    return;
  }
  double adjustedDeltaTime=realDeltaTime;
  if (realDeltaTime > MAX_DELTA_TIME_SEC) {
    adjustedDeltaTime=MAX_DELTA_TIME_SEC;
  }
  mTimeAccumulator+=adjustedDeltaTime;
  double tension=mSpringConfig.tension;
  double friction=mSpringConfig.friction;
  double position=mCurrentState.position;
  double velocity=mCurrentState.velocity;
  double tempPosition=mTempState.position;
  double tempVelocity=mTempState.velocity;
  double aVelocity, aAcceleration;
  double bVelocity, bAcceleration;
  double cVelocity, cAcceleration;
  double dVelocity, dAcceleration;
  double dxdt, dvdt;
  while (mTimeAccumulator >= SOLVER_TIMESTEP_SEC) {
    mTimeAccumulator-=SOLVER_TIMESTEP_SEC;
    if (mTimeAccumulator < SOLVER_TIMESTEP_SEC) {
      mPreviousState.position=position;
      mPreviousState.velocity=velocity;
    }
    aVelocity=velocity;
    aAcceleration=(tension * (mEndValue - tempPosition)) - friction * velocity;
    tempPosition=position + aVelocity * SOLVER_TIMESTEP_SEC * 0.5;
    tempVelocity=velocity + aAcceleration * SOLVER_TIMESTEP_SEC * 0.5;
    bVelocity=tempVelocity;
    bAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;
    tempPosition=position + bVelocity * SOLVER_TIMESTEP_SEC * 0.5;
    tempVelocity=velocity + bAcceleration * SOLVER_TIMESTEP_SEC * 0.5;
    cVelocity=tempVelocity;
    cAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;
    tempPosition=position + cVelocity * SOLVER_TIMESTEP_SEC;
    tempVelocity=velocity + cAcceleration * SOLVER_TIMESTEP_SEC;
    dVelocity=tempVelocity;
    dAcceleration=(tension * (mEndValue - tempPosition)) - friction * tempVelocity;
    dxdt=1.0 / 6.0 * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity);
    dvdt=1.0 / 6.0 * (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration);
    position+=dxdt * SOLVER_TIMESTEP_SEC;
    velocity+=dvdt * SOLVER_TIMESTEP_SEC;
  }
  mTempState.position=tempPosition;
  mTempState.velocity=tempVelocity;
  mCurrentState.position=position;
  mCurrentState.velocity=velocity;
  if (mTimeAccumulator > 0) {
    interpolate(mTimeAccumulator / SOLVER_TIMESTEP_SEC);
  }
  if (isAtRest() || (mOvershootClampingEnabled && isOvershooting())) {
    mStartValue=mEndValue;
    mCurrentState.position=mEndValue;
    setVelocity(0);
    isAtRest=true;
  }
  boolean notifyActivate=false;
  if (mWasAtRest) {
    mWasAtRest=false;
    notifyActivate=true;
  }
  boolean notifyAtRest=false;
  if (isAtRest) {
    mWasAtRest=true;
    notifyAtRest=true;
  }
  for (  SpringListener listener : mListeners) {
    if (notifyActivate) {
      listener.onSpringActivate(this);
    }
    listener.onSpringUpdate(this);
    if (notifyAtRest) {
      listener.onSpringAtRest(this);
    }
  }
}
