{
  Rect rect=new Rect();
  int childCount=mListView.getChildCount();
  int[] listViewCoords=new int[2];
  mListView.getLocationOnScreen(listViewCoords);
  int x=(int)motionEvent.getRawX() - listViewCoords[0];
  int y=(int)motionEvent.getRawY() - listViewCoords[1];
  View downView=null;
  for (int i=0; i < childCount && downView == null; i++) {
    View child=mListView.getChildAt(i);
    child.getHitRect(rect);
    if (rect.contains(x,y)) {
      downView=child;
    }
  }
  if (downView != null) {
    mDownX=motionEvent.getRawX();
    mDownY=motionEvent.getRawY();
    int downPosition=AdapterViewUtil.getPositionForView(mListView,downView);
    if (mDismissableManager != null) {
      long downId=mListView.getAdapter().getItemId(downPosition);
      if (!mDismissableManager.isDismissable(downId,downPosition)) {
        return false;
      }
    }
    mCurrentDismissData=createPendingDismissData(downPosition,downView);
    if (mPendingDismisses.contains(mCurrentDismissData) || downPosition >= mVirtualListCount) {
      mCurrentDismissData=null;
      return false;
    }
 else {
      mTouchChildTouched=!mIsParentHorizontalScrollContainer && mResIdOfTouchChild == 0;
      if (mResIdOfTouchChild != 0) {
        mIsParentHorizontalScrollContainer=false;
        final View childView=downView.findViewById(mResIdOfTouchChild);
        if (childView != null) {
          final Rect childRect=getChildViewRect(mListView,childView);
          if (childRect.contains((int)motionEvent.getX(),(int)motionEvent.getY())) {
            mTouchChildTouched=true;
            mListView.requestDisallowInterceptTouchEvent(true);
          }
        }
      }
      if (mIsParentHorizontalScrollContainer) {
        mTouchChildTouched=true;
        mListView.requestDisallowInterceptTouchEvent(true);
      }
      mVelocityTracker=VelocityTracker.obtain();
      mVelocityTracker.addMovement(motionEvent);
    }
  }
  return true;
}
