{
  canvas.restore();
  canvas.save();
  float rotation=0;
  float pivotX=width / 2;
  float pivotY=width / 2;
  float startX=sidePadding;
  float startY=topPadding + dip3 / 2 * 5;
  float stopX=width - sidePadding;
  float stopY=topPadding + dip3 / 2 * 5;
  int alpha=255;
switch (animationState) {
case BURGER_ARROW:
    if (isMorphingForward()) {
      rotation=ratio * ARROW_MID_LINE_ANGLE;
    }
 else {
      rotation=ARROW_MID_LINE_ANGLE + (1 - ratio) * ARROW_MID_LINE_ANGLE;
    }
  stopX-=ratio * resolveStrokeModifier(ratio) / 2;
break;
case BURGER_X:
alpha=(int)((1 - ratio) * 255);
break;
case ARROW_X:
alpha=(int)((1 - ratio) * 255);
startX+=(1 - ratio) * dip2;
break;
case ARROW_CHECK:
if (isMorphingForward()) {
rotation=ratio * CHECK_MIDDLE_ANGLE;
startX+=dip3 / 2 + ratio * dip4;
stopX+=ratio * (dip8 + diph);
}
 else {
rotation=CHECK_MIDDLE_ANGLE - CHECK_MIDDLE_ANGLE * (1 - ratio);
startX+=dip3 / 2 + dip4 - (1 - ratio) * (dip2 + diph);
stopX+=dip8 - (1 - ratio) * (dip2 + dip6);
}
pivotX=width / 2 + dip3 * 2;
break;
case BURGER_CHECK:
rotation=ratio * CHECK_MIDDLE_ANGLE;
startX+=ratio * (dip4 + dip3 / 2);
stopX+=ratio * (dip8 + diph);
pivotX=width / 2 + dip3 * 2;
break;
case X_CHECK:
alpha=(int)(ratio * 255);
rotation=ratio * CHECK_MIDDLE_ANGLE;
startX+=ratio * (dip4 + dip3 / 2);
stopX+=ratio * (dip8 + diph);
pivotX=width / 2 + dip3 * 2;
break;
}
iconPaint.setAlpha(alpha);
canvas.rotate(rotation,pivotX,pivotY);
canvas.drawLine(startX,startY,stopX,stopY,iconPaint);
iconPaint.setAlpha(255);
}
