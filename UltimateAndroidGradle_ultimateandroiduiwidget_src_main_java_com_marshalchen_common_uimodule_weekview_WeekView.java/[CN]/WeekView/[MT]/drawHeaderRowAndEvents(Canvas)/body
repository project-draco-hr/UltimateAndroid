{
  mHeaderColumnWidth=mTimeTextWidth + mHeaderColumnPadding * 2;
  mWidthPerDay=getWidth() - mHeaderColumnWidth - mColumnGap * (mNumberOfVisibleDays - 1);
  mWidthPerDay=mWidthPerDay / mNumberOfVisibleDays;
  if (mIsFirstDraw && mNumberOfVisibleDays >= 7) {
    if (mToday.get(Calendar.DAY_OF_WEEK) != mFirstDayOfWeek) {
      int difference=7 + (mToday.get(Calendar.DAY_OF_WEEK) - mFirstDayOfWeek);
      mCurrentOrigin.x+=(mWidthPerDay + mColumnGap) * difference;
    }
    mIsFirstDraw=false;
  }
  if (mCurrentScrollDirection == Direction.HORIZONTAL)   mCurrentOrigin.x-=mDistanceX;
  int leftDaysWithGaps=(int)-(Math.ceil(mCurrentOrigin.x / (mWidthPerDay + mColumnGap)));
  float startFromPixel=mCurrentOrigin.x + (mWidthPerDay + mColumnGap) * leftDaysWithGaps + mHeaderColumnWidth;
  float startPixel=startFromPixel;
  Calendar day=(Calendar)mToday.clone();
  day.add(Calendar.HOUR,6);
  int lineCount=(int)((getHeight() - mHeaderTextHeight - mHeaderRowPadding * 2 - mHeaderMarginBottom) / mHourHeight) + 1;
  lineCount=(lineCount) * (mNumberOfVisibleDays + 1);
  float[] hourLines=new float[lineCount * 4];
  if (mEventRects != null) {
    for (    EventRect eventRect : mEventRects) {
      eventRect.rectF=null;
    }
  }
  for (int dayNumber=leftDaysWithGaps + 1; dayNumber <= leftDaysWithGaps + mNumberOfVisibleDays + 1; dayNumber++) {
    day=(Calendar)mToday.clone();
    day.add(Calendar.DATE,dayNumber - 1);
    boolean sameDay=isSameDay(day,mToday);
    if (mEventRects == null || mRefreshEvents || (dayNumber == leftDaysWithGaps + 1 && mFetchedMonths[1] != day.get(Calendar.MONTH) + 1 && day.get(Calendar.DAY_OF_MONTH) == 15)) {
      getMoreEvents(day);
      mRefreshEvents=false;
    }
    float start=(startPixel < mHeaderColumnWidth ? mHeaderColumnWidth : startPixel);
    if (mWidthPerDay + startPixel - start > 0)     canvas.drawRect(start,mHeaderTextHeight + mHeaderRowPadding * 2 + mTimeTextHeight / 2 + mHeaderMarginBottom,startPixel + mWidthPerDay,getHeight(),sameDay ? mTodayBackgroundPaint : mDayBackgroundPaint);
    int i=0;
    for (int hourNumber=0; hourNumber < 24; hourNumber++) {
      float top=mHeaderTextHeight + mHeaderRowPadding * 2 + mCurrentOrigin.y + mHourHeight * hourNumber + mTimeTextHeight / 2 + mHeaderMarginBottom;
      if (top > mHeaderTextHeight + mHeaderRowPadding * 2 + mTimeTextHeight / 2 + mHeaderMarginBottom - mHourSeparatorHeight && top < getHeight() && startPixel + mWidthPerDay - start > 0) {
        hourLines[i * 4]=start;
        hourLines[i * 4 + 1]=top;
        hourLines[i * 4 + 2]=startPixel + mWidthPerDay;
        hourLines[i * 4 + 3]=top;
        i++;
      }
    }
    canvas.drawLines(hourLines,mHourSeparatorPaint);
    drawEvents(day,startPixel,canvas);
    startPixel+=mWidthPerDay + mColumnGap;
  }
  canvas.drawRect(0,0,getWidth(),mHeaderTextHeight + mHeaderRowPadding * 2,mHeaderBackgroundPaint);
  startPixel=startFromPixel;
  for (int dayNumber=leftDaysWithGaps + 1; dayNumber <= leftDaysWithGaps + mNumberOfVisibleDays + 1; dayNumber++) {
    day=(Calendar)mToday.clone();
    day.add(Calendar.DATE,dayNumber - 1);
    boolean sameDay=isSameDay(day,mToday);
    String dayLabel=String.format("%s %d/%02d",getDayName(day),day.get(Calendar.MONTH) + 1,day.get(Calendar.DAY_OF_MONTH));
    canvas.drawText(dayLabel,startPixel + mWidthPerDay / 2,mHeaderTextHeight + mHeaderRowPadding,sameDay ? mTodayHeaderTextPaint : mHeaderTextPaint);
    startPixel+=mWidthPerDay + mColumnGap;
  }
}
