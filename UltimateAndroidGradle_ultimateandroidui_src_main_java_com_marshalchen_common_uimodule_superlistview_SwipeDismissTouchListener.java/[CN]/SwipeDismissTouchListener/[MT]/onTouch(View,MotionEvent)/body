{
  motionEvent.offsetLocation(mTranslationX,0);
  if (mViewWidth < 2) {
    mViewWidth=mView.getWidth();
  }
switch (motionEvent.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
{
      mDownX=motionEvent.getRawX();
      mDownY=motionEvent.getRawY();
      if (mCallbacks.canDismiss(mToken)) {
        mVelocityTracker=VelocityTracker.obtain();
        mVelocityTracker.addMovement(motionEvent);
      }
      return false;
    }
case MotionEvent.ACTION_UP:
{
    if (mVelocityTracker == null) {
      break;
    }
    float deltaX=motionEvent.getRawX() - mDownX;
    mVelocityTracker.addMovement(motionEvent);
    mVelocityTracker.computeCurrentVelocity(1000);
    float velocityX=mVelocityTracker.getXVelocity();
    float absVelocityX=Math.abs(velocityX);
    float absVelocityY=Math.abs(mVelocityTracker.getYVelocity());
    boolean dismiss=false;
    boolean dismissRight=false;
    if (Math.abs(deltaX) > mViewWidth / 2 && mSwiping) {
      dismiss=true;
      dismissRight=deltaX > 0;
    }
 else     if (mMinFlingVelocity <= absVelocityX && absVelocityX <= mMaxFlingVelocity && absVelocityY < absVelocityX && absVelocityY < absVelocityX && mSwiping) {
      dismiss=(velocityX < 0) == (deltaX < 0);
      dismissRight=mVelocityTracker.getXVelocity() > 0;
    }
    if (dismiss) {
      mView.animate().translationX(dismissRight ? mViewWidth : -mViewWidth).alpha(0).setDuration(mAnimationTime).setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          performDismiss();
        }
      }
);
    }
 else     if (mSwiping) {
      mView.animate().translationX(0).alpha(1).setDuration(mAnimationTime).setListener(null);
    }
    mVelocityTracker.recycle();
    mVelocityTracker=null;
    mTranslationX=0;
    mDownX=0;
    mDownY=0;
    mSwiping=false;
    break;
  }
case MotionEvent.ACTION_CANCEL:
{
  if (mVelocityTracker == null) {
    break;
  }
  mView.animate().translationX(0).alpha(1).setDuration(mAnimationTime).setListener(null);
  mVelocityTracker.recycle();
  mVelocityTracker=null;
  mTranslationX=0;
  mDownX=0;
  mDownY=0;
  mSwiping=false;
  break;
}
case MotionEvent.ACTION_MOVE:
{
if (mVelocityTracker == null) {
  break;
}
mVelocityTracker.addMovement(motionEvent);
float deltaX=motionEvent.getRawX() - mDownX;
float deltaY=motionEvent.getRawY() - mDownY;
if (Math.abs(deltaX) > mSlop && Math.abs(deltaY) < Math.abs(deltaX) / 2) {
  mSwiping=true;
  mSwipingSlop=(deltaX > 0 ? mSlop : -mSlop);
  mView.getParent().requestDisallowInterceptTouchEvent(true);
  MotionEvent cancelEvent=MotionEvent.obtain(motionEvent);
  cancelEvent.setAction(MotionEvent.ACTION_CANCEL | (motionEvent.getActionIndex() << MotionEvent.ACTION_POINTER_INDEX_SHIFT));
  mView.onTouchEvent(cancelEvent);
  cancelEvent.recycle();
}
if (mSwiping) {
  mTranslationX=deltaX;
  mView.setTranslationX(deltaX - mSwipingSlop);
  mView.setAlpha(Math.max(0f,Math.min(1f,1f - 2f * Math.abs(deltaX) / mViewWidth)));
  return true;
}
break;
}
}
return false;
}
