{
  super(context,attrs,defStyle);
  setFocusable(true);
  setWillNotDraw(false);
  mTouchSlop=ViewConfiguration.get(context).getScaledTouchSlop();
  float density=context.getResources().getDisplayMetrics().density;
  mTrackHeight=(int)(1 * density);
  mScrubberHeight=(int)(4 * density);
  int thumbSize=(int)(density * ThumbDrawable.DEFAULT_SIZE_DP);
  int touchBounds=(int)(density * 32);
  mAddedTouchBounds=(touchBounds - thumbSize) / 2;
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.DiscreteSeekBar,R.attr.discreteSeekBarStyle,defStyle);
  int max=100;
  int min=0;
  int value=0;
  mMirrorForRtl=a.getBoolean(R.styleable.DiscreteSeekBar_dsb_mirrorForRtl,mMirrorForRtl);
  mAllowTrackClick=a.getBoolean(R.styleable.DiscreteSeekBar_dsb_allowTrackClickToDrag,mAllowTrackClick);
  int indexMax=R.styleable.DiscreteSeekBar_dsb_max;
  int indexMin=R.styleable.DiscreteSeekBar_dsb_min;
  int indexValue=R.styleable.DiscreteSeekBar_dsb_value;
  final TypedValue out=new TypedValue();
  if (a.getValue(indexMax,out)) {
    if (out.type == TypedValue.TYPE_DIMENSION) {
      max=a.getDimensionPixelSize(indexMax,max);
    }
 else {
      max=a.getInteger(indexMax,max);
    }
  }
  if (a.getValue(indexMin,out)) {
    if (out.type == TypedValue.TYPE_DIMENSION) {
      min=a.getDimensionPixelSize(indexMin,min);
    }
 else {
      min=a.getInteger(indexMin,min);
    }
  }
  if (a.getValue(indexValue,out)) {
    if (out.type == TypedValue.TYPE_DIMENSION) {
      value=a.getDimensionPixelSize(indexValue,value);
    }
 else {
      value=a.getInteger(indexValue,value);
    }
  }
  mMin=min;
  mMax=Math.max(min + 1,max);
  mValue=Math.max(min,Math.min(max,value));
  updateKeyboardRange();
  mIndicatorFormatter=a.getString(R.styleable.DiscreteSeekBar_dsb_indicatorFormatter);
  ColorStateList trackColor=a.getColorStateList(R.styleable.DiscreteSeekBar_dsb_trackColor);
  ColorStateList progressColor=a.getColorStateList(R.styleable.DiscreteSeekBar_dsb_progressColor);
  ColorStateList rippleColor=a.getColorStateList(R.styleable.DiscreteSeekBar_dsb_rippleColor);
  boolean editMode=isInEditMode();
  if (editMode && rippleColor == null) {
    rippleColor=new ColorStateList(new int[][]{new int[]{}},new int[]{Color.DKGRAY});
  }
  if (editMode && trackColor == null) {
    trackColor=new ColorStateList(new int[][]{new int[]{}},new int[]{Color.GRAY});
  }
  if (editMode && progressColor == null) {
    progressColor=new ColorStateList(new int[][]{new int[]{}},new int[]{0xff009688});
  }
  mRipple=SeekBarCompat.getRipple(rippleColor);
  if (isLollipopOrGreater) {
    SeekBarCompat.setBackground(this,mRipple);
  }
 else {
    mRipple.setCallback(this);
  }
  TrackRectDrawable shapeDrawable=new TrackRectDrawable(trackColor);
  mTrack=shapeDrawable;
  mTrack.setCallback(this);
  shapeDrawable=new TrackRectDrawable(progressColor);
  mScrubber=shapeDrawable;
  mScrubber.setCallback(this);
  ThumbDrawable thumbDrawable=new ThumbDrawable(progressColor,thumbSize);
  mThumb=thumbDrawable;
  mThumb.setCallback(this);
  mThumb.setBounds(0,0,mThumb.getIntrinsicWidth(),mThumb.getIntrinsicHeight());
  if (!editMode) {
    mIndicator=new PopupIndicator(context,attrs,defStyle,convertValueToMessage(mMax));
    mIndicator.setValue(convertValueToMessage(mValue));
    mIndicator.setListener(mFloaterListener);
  }
  a.recycle();
  setNumericTransformer(new DefaultNumericTransformer());
}
