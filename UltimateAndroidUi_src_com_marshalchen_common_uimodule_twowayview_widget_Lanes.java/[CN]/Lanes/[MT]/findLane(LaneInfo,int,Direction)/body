{
  outInfo.setUndefined();
  int targetEdge=(direction == Direction.END ? Integer.MAX_VALUE : Integer.MIN_VALUE);
  for (int l=0; l < mLanes.length; l++) {
    final int laneEdge;
    if (mIsVertical) {
      laneEdge=(direction == Direction.END ? mLanes[l].bottom : mLanes[l].top);
    }
 else {
      laneEdge=(direction == Direction.END ? mLanes[l].right : mLanes[l].left);
    }
    if ((direction == Direction.END && laneEdge < targetEdge) || (direction == Direction.START && laneEdge > targetEdge)) {
      final int targetLane=findLaneThatFitsSpan(l,laneSpan,direction);
      if (targetLane != NO_LANE) {
        targetEdge=laneEdge;
        outInfo.set(targetLane,l);
      }
    }
  }
}
