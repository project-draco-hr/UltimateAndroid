{
  super.onActivityCreated(savedInstanceState);
  mListView=(QuickReturnListView)getListView();
  mQuickReturnView.setText("Animation");
  mListView.addHeaderView(mHeader);
  String[] array=new String[]{"Android","Android","Android","Android","Android","Android","Android","Android","Android","Android","Android","Android","Android","Android","Android","Android"};
  setListAdapter(new ArrayAdapter<String>(getActivity(),R.layout.quick_return_listview_list_item,R.id.text1,array));
  mListView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      mQuickReturnHeight=mQuickReturnView.getHeight();
      mListView.computeScrollY();
      mCachedVerticalScrollRange=mListView.getListHeight();
    }
  }
);
  mListView.setOnScrollListener(new OnScrollListener(){
    @SuppressLint("NewApi") @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      mScrollY=0;
      int translationY=0;
      if (mListView.scrollYIsComputed()) {
        mScrollY=mListView.getComputedScrollY();
      }
      rawY=mPlaceHolder.getTop() - Math.min(mCachedVerticalScrollRange - mListView.getHeight(),mScrollY);
switch (mState) {
case STATE_OFFSCREEN:
        if (rawY <= mMinRawY) {
          mMinRawY=rawY;
        }
 else {
          mState=STATE_RETURNING;
        }
      translationY=rawY;
    break;
case STATE_ONSCREEN:
  if (rawY < -mQuickReturnHeight) {
    System.out.println("test3");
    mState=STATE_OFFSCREEN;
    mMinRawY=rawY;
  }
translationY=rawY;
break;
case STATE_RETURNING:
if (translationY > 0) {
translationY=0;
mMinRawY=rawY - mQuickReturnHeight;
}
 else if (rawY > 0) {
mState=STATE_ONSCREEN;
translationY=rawY;
}
 else if (translationY < -mQuickReturnHeight) {
mState=STATE_OFFSCREEN;
mMinRawY=rawY;
}
 else if (mQuickReturnView.getTranslationY() != 0 && !noAnimation) {
noAnimation=true;
anim=new TranslateAnimation(0,0,-mQuickReturnHeight,0);
anim.setFillAfter(true);
anim.setDuration(250);
mQuickReturnView.startAnimation(anim);
anim.setAnimationListener(new AnimationListener(){
@Override public void onAnimationStart(Animation animation){
}
@Override public void onAnimationRepeat(Animation animation){
}
@Override public void onAnimationEnd(Animation animation){
  noAnimation=false;
  mMinRawY=rawY;
  mState=STATE_EXPANDED;
}
}
);
}
break;
case STATE_EXPANDED:
if (rawY < mMinRawY - 2 && !noAnimation) {
noAnimation=true;
anim=new TranslateAnimation(0,0,0,-mQuickReturnHeight);
anim.setFillAfter(true);
anim.setDuration(250);
anim.setAnimationListener(new AnimationListener(){
@Override public void onAnimationStart(Animation animation){
}
@Override public void onAnimationRepeat(Animation animation){
}
@Override public void onAnimationEnd(Animation animation){
noAnimation=false;
mState=STATE_OFFSCREEN;
}
}
);
mQuickReturnView.startAnimation(anim);
}
 else if (translationY > 0) {
translationY=0;
mMinRawY=rawY - mQuickReturnHeight;
}
 else if (rawY > 0) {
mState=STATE_ONSCREEN;
translationY=rawY;
}
 else if (translationY < -mQuickReturnHeight) {
mState=STATE_OFFSCREEN;
mMinRawY=rawY;
}
 else {
mMinRawY=rawY;
}
}
if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB) {
anim=new TranslateAnimation(0,0,translationY,translationY);
anim.setFillAfter(true);
anim.setDuration(0);
mQuickReturnView.startAnimation(anim);
}
 else {
mQuickReturnView.setTranslationY(translationY);
}
}
@Override public void onScrollStateChanged(AbsListView view,int scrollState){
}
}
);
}
