{
  if (mVelocityTracker == null) {
    return false;
  }
  float deltaX=motionEvent.getRawX() - mDownX;
  mVelocityTracker.addMovement(motionEvent);
  mVelocityTracker.computeCurrentVelocity(1000);
  float velocityX=Math.abs(mVelocityTracker.getXVelocity());
  float velocityY=Math.abs(mVelocityTracker.getYVelocity());
  boolean dismiss=false;
  boolean dismissRight=false;
  if (Math.abs(deltaX) > mViewWidth / 2) {
    dismiss=true;
    dismissRight=deltaX > 0;
  }
 else   if (mMinFlingVelocity <= velocityX && velocityX <= mMaxFlingVelocity && velocityY < velocityX) {
    dismiss=true;
    dismissRight=mVelocityTracker.getXVelocity() > 0;
  }
  if (mSwiping) {
    if (dismiss) {
      final PendingDismissData pendingDismissData=mCurrentDismissData;
      ++mDismissAnimationRefCount;
      animate(mCurrentDismissData.view).translationX(dismissRight ? mViewWidth : -mViewWidth).alpha(0).setDuration(mAnimationTime).setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        final Animator animation){
          onDismiss(pendingDismissData);
        }
      }
);
      mVirtualListCount--;
      mPendingDismisses.add(mCurrentDismissData);
    }
 else {
      animate(mCurrentDismissData.view).translationX(0).alpha(1).setDuration(mAnimationTime).setListener(null);
    }
  }
  mVelocityTracker.recycle();
  mVelocityTracker=null;
  mDownX=0;
  mDownY=0;
  mCurrentDismissData=null;
  mSwiping=false;
  return false;
}
