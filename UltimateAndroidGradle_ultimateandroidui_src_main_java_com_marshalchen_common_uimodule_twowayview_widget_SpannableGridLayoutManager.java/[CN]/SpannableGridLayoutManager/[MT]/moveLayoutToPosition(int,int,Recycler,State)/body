{
  final boolean isVertical=isVertical();
  final Lanes lanes=getLanes();
  lanes.reset(0);
  for (int i=0; i <= position; i++) {
    SpannableItemEntry entry=(SpannableItemEntry)getItemEntryForPosition(i);
    if (entry == null) {
      final View child=recycler.getViewForPosition(i);
      entry=(SpannableItemEntry)cacheChildLaneAndSpan(child,Direction.END);
    }
    mTempLaneInfo.set(entry.startLane,entry.anchorLane);
    if (mTempLaneInfo.isUndefined()) {
      lanes.findLane(mTempLaneInfo,getLaneSpanForPosition(i),Direction.END);
      entry.setLane(mTempLaneInfo);
    }
    lanes.getChildFrame(mTempRect,getChildWidth(entry.colSpan),getChildHeight(entry.rowSpan),mTempLaneInfo,Direction.END);
    if (i != position) {
      pushChildFrame(entry,mTempRect,entry.startLane,getLaneSpan(entry,isVertical),Direction.END);
    }
  }
  lanes.getLane(mTempLaneInfo.startLane,mTempRect);
  lanes.reset(Direction.END);
  lanes.offset(offset - (isVertical ? mTempRect.bottom : mTempRect.right));
}
