{
  super.initWithGLContext();
  int[] textures=new int[1];
  GLES20.glGenTextures(1,textures,0);
  GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,textures[0]);
  GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GL10.GL_TEXTURE_MIN_FILTER,GL10.GL_LINEAR);
  GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GL10.GL_TEXTURE_MAG_FILTER,GL10.GL_LINEAR);
  GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GL10.GL_TEXTURE_WRAP_S,GL10.GL_CLAMP_TO_EDGE);
  GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GL10.GL_TEXTURE_WRAP_T,GL10.GL_CLAMP_TO_EDGE);
  texture_in=textures[0];
  camTex=new SurfaceTexture(texture_in);
  camTex.setOnFrameAvailableListener(this);
  boolean failed=true;
  while (failed) {
    try {
      if (camera != null) {
        camera.stopPreview();
        camera.release();
        camera=null;
      }
      camera=createCamera();
      camera.setPreviewTexture(camTex);
      camera.startPreview();
      setRenderSizeToCameraSize();
      failed=false;
    }
 catch (    Exception e) {
      StringWriter sw=new StringWriter();
      PrintWriter pw=new PrintWriter(sw);
      e.printStackTrace(pw);
      Log.e("CameraInput",sw.toString());
      if (camera != null) {
        camera.release();
        camera=null;
      }
    }
  }
}
