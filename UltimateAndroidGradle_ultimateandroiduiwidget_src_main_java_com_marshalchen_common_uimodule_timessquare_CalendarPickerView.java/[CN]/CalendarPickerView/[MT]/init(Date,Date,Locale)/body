{
  if (minDate == null || maxDate == null) {
    throw new IllegalArgumentException("minDate and maxDate must be non-null.  " + dbg(minDate,maxDate));
  }
  if (minDate.after(maxDate)) {
    throw new IllegalArgumentException("minDate must be before maxDate.  " + dbg(minDate,maxDate));
  }
  if (minDate.getTime() == 0 || maxDate.getTime() == 0) {
    throw new IllegalArgumentException("minDate and maxDate must be non-zero.  " + dbg(minDate,maxDate));
  }
  if (locale == null) {
    throw new IllegalArgumentException("Locale is null.");
  }
  this.locale=locale;
  today=Calendar.getInstance(locale);
  minCal=Calendar.getInstance(locale);
  maxCal=Calendar.getInstance(locale);
  monthCounter=Calendar.getInstance(locale);
  monthNameFormat=new SimpleDateFormat(getContext().getString(R.string.month_name_format),locale);
  for (  MonthDescriptor month : months) {
    month.setLabel(monthNameFormat.format(month.getDate()));
  }
  weekdayNameFormat=new SimpleDateFormat(getContext().getString(R.string.day_name_format),locale);
  fullDateFormat=DateFormat.getDateInstance(DateFormat.MEDIUM,locale);
  this.selectionMode=SelectionMode.SINGLE;
  selectedCals.clear();
  selectedCells.clear();
  highlightedCals.clear();
  highlightedCells.clear();
  cells.clear();
  months.clear();
  minCal.setTime(minDate);
  maxCal.setTime(maxDate);
  setMidnight(minCal);
  setMidnight(maxCal);
  displayOnly=false;
  maxCal.add(MINUTE,-1);
  monthCounter.setTime(minCal.getTime());
  final int maxMonth=maxCal.get(MONTH);
  final int maxYear=maxCal.get(YEAR);
  while ((monthCounter.get(MONTH) <= maxMonth || monthCounter.get(YEAR) < maxYear) && monthCounter.get(YEAR) < maxYear + 1) {
    Date date=monthCounter.getTime();
    MonthDescriptor month=new MonthDescriptor(monthCounter.get(MONTH),monthCounter.get(YEAR),date,monthNameFormat.format(date));
    cells.add(getMonthCells(month,monthCounter));
    months.add(month);
    monthCounter.add(MONTH,1);
  }
  validateAndUpdate();
  return new FluentInitializer();
}
