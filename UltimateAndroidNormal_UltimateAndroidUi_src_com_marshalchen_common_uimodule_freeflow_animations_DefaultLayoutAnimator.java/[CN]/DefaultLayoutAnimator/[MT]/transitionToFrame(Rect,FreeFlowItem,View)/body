{
  ValueAnimator anim=ValueAnimator.ofFloat(0f,1f);
  anim.setDuration(cellPositionTransitionAnimationDuration);
  anim.addUpdateListener(new AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      try {
        int itemWidth=of.width() + (int)((nf.frame.width() - of.width()) * animation.getAnimatedFraction());
        int itemHeight=of.height() + (int)((nf.frame.height() - of.height()) * animation.getAnimatedFraction());
        int widthSpec=MeasureSpec.makeMeasureSpec(itemWidth,MeasureSpec.EXACTLY);
        int heightSpec=MeasureSpec.makeMeasureSpec(itemHeight,MeasureSpec.EXACTLY);
        v.measure(widthSpec,heightSpec);
        Rect frame=new Rect();
        Rect nff=nf.frame;
        frame.left=(int)(of.left + (nff.left - of.left) * animation.getAnimatedFraction());
        frame.top=(int)(of.top + (nff.top - of.top) * animation.getAnimatedFraction());
        frame.right=frame.left + (int)(of.width() + (nff.width() - of.width()) * animation.getAnimatedFraction());
        frame.bottom=frame.top + (int)(of.height() + (nff.height() - of.height()) * animation.getAnimatedFraction());
        v.layout(frame.left,frame.top,frame.right,frame.bottom);
      }
 catch (      NullPointerException e) {
        Logs.e(TAG,"Nullpointer exception");
        e.printStackTrace();
        animation.cancel();
      }
    }
  }
);
  anim.setInterpolator(new DecelerateInterpolator(2.0f));
  return anim;
}
