{
  if (mSkipCallingOnTouchListener) {
    return super.onTouchEvent(event);
  }
  if (mOnTouchListener instanceof SwipeOnTouchListener) {
    if (((SwipeOnTouchListener)mOnTouchListener).isSwiping()) {
      mSkipCallingOnTouchListener=true;
      boolean retVal=mOnTouchListener.onTouch(this,event);
      mSkipCallingOnTouchListener=false;
      return retVal || super.onTouchEvent(event);
    }
  }
switch (event.getAction() & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    mDownX=(int)event.getX();
  mDownY=(int)event.getY();
mActivePointerId=event.getPointerId(0);
mDynamicTouchChildTouched=false;
if (mResIdOfDynamicTouchChild != 0) {
mIsParentHorizontalScrollContainer=false;
int position=pointToPosition(mDownX,mDownY);
int childNum=(position != INVALID_POSITION) ? position - getFirstVisiblePosition() : -1;
View itemView=(childNum >= 0) ? getChildAt(childNum) : null;
View childView=(itemView != null) ? itemView.findViewById(mResIdOfDynamicTouchChild) : null;
if (childView != null) {
final Rect childRect=getChildViewRect(this,childView);
if (childRect.contains(mDownX,mDownY)) {
  mDynamicTouchChildTouched=true;
  getParent().requestDisallowInterceptTouchEvent(true);
}
}
}
if (mIsParentHorizontalScrollContainer) {
getParent().requestDisallowInterceptTouchEvent(true);
}
break;
case MotionEvent.ACTION_MOVE:
if (mActivePointerId == INVALID_POINTER_ID) {
break;
}
int pointerIndex=event.findPointerIndex(mActivePointerId);
mLastEventY=(int)event.getY(pointerIndex);
mLastEventX=(int)event.getX(pointerIndex);
int deltaY=mLastEventY - mDownY;
int deltaX=mLastEventX - mDownX;
if (!mCellIsMobile && mDynamicTouchChildTouched) {
if (Math.abs(deltaY) > mSlop && Math.abs(deltaY) > Math.abs(deltaX)) {
makeCellMobile();
MotionEvent cancelEvent=MotionEvent.obtain(event);
cancelEvent.setAction(MotionEvent.ACTION_CANCEL | (event.getActionIndex() << MotionEvent.ACTION_POINTER_INDEX_SHIFT));
super.onTouchEvent(cancelEvent);
cancelEvent.recycle();
}
}
if (mCellIsMobile) {
mHoverCellCurrentBounds.offsetTo(mHoverCellOriginalBounds.left,mHoverCellOriginalBounds.top + deltaY + mTotalOffset);
mHoverCell.setBounds(mHoverCellCurrentBounds);
invalidate();
handleCellSwitch();
mIsMobileScrolling=false;
handleMobileCellScroll();
}
break;
case MotionEvent.ACTION_UP:
mDynamicTouchChildTouched=false;
touchEventsEnded();
break;
case MotionEvent.ACTION_CANCEL:
mDynamicTouchChildTouched=false;
touchEventsCancelled();
break;
case MotionEvent.ACTION_POINTER_UP:
pointerIndex=(event.getAction() & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
final int pointerId=event.getPointerId(pointerIndex);
if (pointerId == mActivePointerId) {
mDynamicTouchChildTouched=false;
touchEventsEnded();
}
break;
default :
break;
}
if (mCellIsMobile) {
return false;
}
 else if (mOnTouchListener != null) {
mSkipCallingOnTouchListener=true;
boolean retVal=mOnTouchListener.onTouch(this,event);
mSkipCallingOnTouchListener=false;
if (retVal) {
return true;
}
}
return super.onTouchEvent(event);
}
