{
  if (!params.containsKey(VIEW_PARAMS_MONTH) && !params.containsKey(VIEW_PARAMS_YEAR)) {
    throw new InvalidParameterException("You must specify month and year for this view");
  }
  setTag(params);
  if (params.containsKey(VIEW_PARAMS_HEIGHT)) {
    mRowHeight=params.get(VIEW_PARAMS_HEIGHT);
    if (mRowHeight < MIN_HEIGHT) {
      mRowHeight=MIN_HEIGHT;
    }
  }
  if (params.containsKey(VIEW_PARAMS_SELECTED_BEGIN_DAY)) {
    mSelectedBeginDay=params.get(VIEW_PARAMS_SELECTED_BEGIN_DAY);
  }
  if (params.containsKey(VIEW_PARAMS_SELECTED_LAST_DAY)) {
    mSelectedLastDay=params.get(VIEW_PARAMS_SELECTED_LAST_DAY);
  }
  if (params.containsKey(VIEW_PARAMS_SELECTED_BEGIN_MONTH)) {
    mSelectedBeginMonth=params.get(VIEW_PARAMS_SELECTED_BEGIN_MONTH);
  }
  if (params.containsKey(VIEW_PARAMS_SELECTED_LAST_MONTH)) {
    mSelectedLastMonth=params.get(VIEW_PARAMS_SELECTED_LAST_MONTH);
  }
  if (params.containsKey(VIEW_PARAMS_SELECTED_BEGIN_YEAR)) {
    mSelectedBeginYear=params.get(VIEW_PARAMS_SELECTED_BEGIN_YEAR);
  }
  if (params.containsKey(VIEW_PARAMS_SELECTED_LAST_YEAR)) {
    mSelectedLastYear=params.get(VIEW_PARAMS_SELECTED_LAST_YEAR);
  }
  mMonth=params.get(VIEW_PARAMS_MONTH);
  mYear=params.get(VIEW_PARAMS_YEAR);
  mHasToday=false;
  mToday=-1;
  mCalendar.set(Calendar.MONTH,mMonth);
  mCalendar.set(Calendar.YEAR,mYear);
  mCalendar.set(Calendar.DAY_OF_MONTH,1);
  mDayOfWeekStart=mCalendar.get(Calendar.DAY_OF_WEEK);
  if (params.containsKey(VIEW_PARAMS_WEEK_START)) {
    mWeekStart=params.get(VIEW_PARAMS_WEEK_START);
  }
 else {
    mWeekStart=mCalendar.getFirstDayOfWeek();
  }
  mNumCells=CalendarUtils.getDaysInMonth(mMonth,mYear);
  for (int i=0; i < mNumCells; i++) {
    final int day=i + 1;
    if (sameDay(day,today)) {
      mHasToday=true;
      mToday=day;
    }
    mIsPrev=prevDay(day,today);
  }
  mNumRows=calculateNumRows();
}
