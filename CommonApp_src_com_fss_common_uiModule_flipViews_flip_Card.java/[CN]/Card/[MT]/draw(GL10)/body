{
  if (dirty) {
    updateVertices();
  }
  if (cardVertices == null) {
    return;
  }
  gl.glFrontFace(GL_CCW);
  gl.glEnable(GL_CULL_FACE);
  gl.glCullFace(GL_BACK);
  gl.glEnableClientState(GL_VERTEX_ARRAY);
  gl.glEnable(GL_BLEND);
  gl.glBlendFunc(GL10.GL_ONE,GL10.GL_ONE_MINUS_SRC_ALPHA);
  gl.glColor4f(1f,1.0f,1f,1.0f);
  if (isValidTexture(texture)) {
    gl.glEnable(GL_TEXTURE_2D);
    gl.glEnableClientState(GL_TEXTURE_COORD_ARRAY);
    gl.glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);
    gl.glTexParameterf(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);
    gl.glTexCoordPointer(2,GL_FLOAT,0,textureBuffer);
    gl.glBindTexture(GL_TEXTURE_2D,texture.getId()[0]);
  }
  if (AphidLog.ENABLE_DEBUG) {
    checkError(gl);
  }
  gl.glPushMatrix();
  if (orientationVertical) {
    if (angle > 0) {
      if (axis == AXIS_TOP) {
        gl.glTranslatef(0,cardVertices[Y_00],0f);
        gl.glRotatef(-angle,1f,0f,0f);
        gl.glTranslatef(0,-cardVertices[Y_00],0f);
      }
 else {
        gl.glTranslatef(0,cardVertices[Y_11],0f);
        gl.glRotatef(angle,1f,0f,0f);
        gl.glTranslatef(0,-cardVertices[Y_11],0f);
      }
    }
  }
 else {
    if (angle > 0) {
      if (axis == AXIS_TOP) {
        gl.glTranslatef(cardVertices[X_00],0,0f);
        gl.glRotatef(-angle,0f,1f,0f);
        gl.glTranslatef(-cardVertices[X_00],0,0f);
      }
 else {
        gl.glTranslatef(cardVertices[X_11],0,0f);
        gl.glRotatef(angle,0f,1f,0f);
        gl.glTranslatef(-cardVertices[X_11],0,0f);
      }
    }
  }
  gl.glVertexPointer(3,GL_FLOAT,0,vertexBuffer);
  gl.glDrawElements(GL_TRIANGLES,indices.length,GL_UNSIGNED_SHORT,indexBuffer);
  if (AphidLog.ENABLE_DEBUG) {
    checkError(gl);
  }
  gl.glPopMatrix();
  if (isValidTexture(texture)) {
    gl.glDisableClientState(GL_TEXTURE_COORD_ARRAY);
    gl.glDisable(GL_TEXTURE_2D);
  }
  float w, h, z;
  float[] shadowVertices;
  if (angle > 0) {
    float alpha=1f * (90f - angle) / 90f;
    if (axis == AXIS_TOP) {
      if (orientationVertical) {
        h=(cardVertices[Y_00] - cardVertices[Y_01]) * (1.0f - cos(d2r(angle)));
        z=(cardVertices[Y_00] - cardVertices[Y_01]) * sin(d2r(angle));
        shadowVertices=new float[]{cardVertices[X_00],cardVertices[Y_01] + h,z,cardVertices[X_01],cardVertices[Y_01],0f,cardVertices[X_11],cardVertices[Y_11],0f,cardVertices[X_10],cardVertices[Y_01] + h,z};
      }
 else {
        w=(cardVertices[X_10] - cardVertices[X_00]) * (1.0f - cos(d2r(angle)));
        z=(cardVertices[X_10] - cardVertices[X_00]) * sin(d2r(angle));
        shadowVertices=new float[]{cardVertices[X_10] - w,cardVertices[Y_00],z,cardVertices[X_11] - w,cardVertices[Y_01],z,cardVertices[X_11],cardVertices[Y_11],0f,cardVertices[X_10],cardVertices[Y_10],0f};
      }
    }
 else {
      if (orientationVertical) {
        h=(cardVertices[Y_00] - cardVertices[Y_01]) * (1f - cos(d2r(angle)));
        z=(cardVertices[Y_00] - cardVertices[Y_01]) * sin(d2r(angle));
        shadowVertices=new float[]{cardVertices[X_00],cardVertices[Y_00],0f,cardVertices[X_01],cardVertices[Y_00] - h,z,cardVertices[X_11],cardVertices[Y_00] - h,z,cardVertices[X_10],cardVertices[Y_00],0f};
      }
 else {
        w=(cardVertices[X_10] - cardVertices[X_00]) * (1f - cos(d2r(angle)));
        z=(cardVertices[X_10] - cardVertices[X_00]) * sin(d2r(angle));
        shadowVertices=new float[]{cardVertices[X_00],cardVertices[Y_00],0f,cardVertices[X_01],cardVertices[Y_01],0f,cardVertices[X_00] + w,cardVertices[Y_11],z,cardVertices[X_01] + w,cardVertices[Y_10],z};
      }
    }
    gl.glDisable(GL_LIGHTING);
    gl.glDisable(GL_DEPTH_TEST);
    gl.glDisable(GL_TEXTURE_2D);
    gl.glEnable(GL_BLEND);
    gl.glBlendFunc(GL_ONE,GL_ONE_MINUS_SRC_ALPHA);
    gl.glColor4f(0f,0.0f,0f,alpha);
    gl.glVertexPointer(3,GL_FLOAT,0,toFloatBuffer(shadowVertices));
    gl.glDrawElements(GL_TRIANGLES,indices.length,GL_UNSIGNED_SHORT,indexBuffer);
    gl.glEnable(GL_TEXTURE_2D);
    gl.glEnable(GL_DEPTH_TEST);
    gl.glEnable(GL_LIGHTING);
  }
  if (AphidLog.ENABLE_DEBUG) {
    checkError(gl);
  }
  gl.glDisable(GL_BLEND);
  gl.glDisableClientState(GL_VERTEX_ARRAY);
  gl.glDisable(GL_CULL_FACE);
}
