{
  Arrays.sort(points,new Comparator<Point>(){
    @Override public int compare(    Point lhs,    Point rhs){
      return lhs.x - rhs.x;
    }
  }
);
  List<Point> spline=getSplineCurve(points);
  if (spline.get(0).x > 0) {
    for (int i=spline.get(0).x; i >= 0; i--) {
      spline.add(0,new Point(i,0));
    }
  }
  if (spline.get(spline.size() - 1).x < 255) {
    for (int i=spline.get(spline.size() - 1).x; i < 256; i++) {
      spline.add(new Point(i,255));
    }
  }
  float[] preparedSplinePoints=new float[spline.size()];
  for (int i=0; i < spline.size(); i++) {
    Point newPoint=spline.get(i);
    Point origPoint=new Point(newPoint.x,newPoint.x);
    float distance=(float)Math.sqrt(Math.pow((origPoint.x - newPoint.x),2.0) + Math.pow((origPoint.y - newPoint.y),2.0));
    if (origPoint.y > newPoint.y) {
      distance=-distance;
    }
    preparedSplinePoints[i]=distance;
  }
  return preparedSplinePoints;
}
