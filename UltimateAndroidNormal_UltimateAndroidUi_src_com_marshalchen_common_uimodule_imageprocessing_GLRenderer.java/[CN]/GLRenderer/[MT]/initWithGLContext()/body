{
  final String vertexShader=getVertexShader();
  final String fragmentShader=getFragmentShader();
  vertexShaderHandle=GLES20.glCreateShader(GLES20.GL_VERTEX_SHADER);
  String errorInfo="none";
  if (vertexShaderHandle != 0) {
    GLES20.glShaderSource(vertexShaderHandle,vertexShader);
    GLES20.glCompileShader(vertexShaderHandle);
    final int[] compileStatus=new int[1];
    GLES20.glGetShaderiv(vertexShaderHandle,GLES20.GL_COMPILE_STATUS,compileStatus,0);
    if (compileStatus[0] == 0) {
      errorInfo=GLES20.glGetShaderInfoLog(vertexShaderHandle);
      GLES20.glDeleteShader(vertexShaderHandle);
      vertexShaderHandle=0;
    }
  }
  if (vertexShaderHandle == 0) {
    throw new RuntimeException(this + ": Could not create vertex shader. Reason: " + errorInfo);
  }
  fragmentShaderHandle=GLES20.glCreateShader(GLES20.GL_FRAGMENT_SHADER);
  if (fragmentShaderHandle != 0) {
    GLES20.glShaderSource(fragmentShaderHandle,fragmentShader);
    GLES20.glCompileShader(fragmentShaderHandle);
    final int[] compileStatus=new int[1];
    GLES20.glGetShaderiv(fragmentShaderHandle,GLES20.GL_COMPILE_STATUS,compileStatus,0);
    if (compileStatus[0] == 0) {
      errorInfo=GLES20.glGetShaderInfoLog(fragmentShaderHandle);
      GLES20.glDeleteShader(fragmentShaderHandle);
      fragmentShaderHandle=0;
    }
  }
  if (fragmentShaderHandle == 0) {
    throw new RuntimeException(this + ": Could not create fragment shader. Reason: " + errorInfo);
  }
  programHandle=GLES20.glCreateProgram();
  if (programHandle != 0) {
    GLES20.glAttachShader(programHandle,vertexShaderHandle);
    GLES20.glAttachShader(programHandle,fragmentShaderHandle);
    bindShaderAttributes();
    GLES20.glLinkProgram(programHandle);
    final int[] linkStatus=new int[1];
    GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);
    if (linkStatus[0] == 0) {
      GLES20.glDeleteProgram(programHandle);
      programHandle=0;
    }
  }
  if (programHandle == 0) {
    throw new RuntimeException("Could not create program.");
  }
  initShaderHandles();
}
