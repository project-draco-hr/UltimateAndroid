{
  if (!mSwipeEnabled) {
    return super.onTouchEvent(ev);
  }
  if (mTouchBeforeAutoHide && mUndoPopup.isShowing()) {
    mHideUndoHandler.sendMessageDelayed(mHideUndoHandler.obtainMessage(mValidDelayedMsgId),mUndoHideDelay);
  }
  if (mViewWidth < 2) {
    mViewWidth=getWidth();
  }
switch (ev.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
{
      if (mSwipePaused) {
        return super.onTouchEvent(ev);
      }
      Rect rect=new Rect();
      int childCount=getChildCount();
      int[] listViewCoords=new int[2];
      getLocationOnScreen(listViewCoords);
      int x=(int)ev.getRawX() - listViewCoords[0];
      int y=(int)ev.getRawY() - listViewCoords[1];
      View child;
      for (int i=getHeaderViewsCount(); i < childCount; i++) {
        child=getChildAt(i);
        if (child != null) {
          child.getHitRect(rect);
          if (rect.contains(x,y)) {
            if (mSwipingLayout > 0) {
              View swipingView=child.findViewById(mSwipingLayout);
              if (swipingView != null) {
                mSwipeDownView=swipingView;
                mSwipeDownChild=child;
                break;
              }
            }
            mSwipeDownView=mSwipeDownChild=child;
            break;
          }
        }
      }
      if (mSwipeDownView != null) {
        try {
          int position=getPositionForView(mSwipeDownView) - getHeaderViewsCount();
          if ((mShouldSwipeCallback == null) || mShouldSwipeCallback.onShouldSwipe(this,position)) {
            mDownX=ev.getRawX();
            mDownPosition=position;
            mVelocityTracker=VelocityTracker.obtain();
            mVelocityTracker.addMovement(ev);
          }
 else {
            mSwipeDownView=mSwipeDownChild=null;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      super.onTouchEvent(ev);
      return true;
    }
case MotionEvent.ACTION_UP:
{
    if (mVelocityTracker == null) {
      break;
    }
    float deltaX=ev.getRawX() - mDownX;
    mVelocityTracker.addMovement(ev);
    mVelocityTracker.computeCurrentVelocity(1000);
    float velocityX=Math.abs(mVelocityTracker.getXVelocity());
    float velocityY=Math.abs(mVelocityTracker.getYVelocity());
    boolean dismiss=false;
    boolean dismissRight=false;
    if (Math.abs(deltaX) > mViewWidth / 3 && mSwiping) {
      dismiss=true;
      dismissRight=deltaX > 0;
    }
 else     if (mMinFlingVelocity <= velocityX && velocityX <= mMaxFlingVelocity && velocityY < velocityX && mSwiping && isSwipeDirectionValid(mVelocityTracker.getXVelocity()) && deltaX >= mViewWidth * 0.2f) {
      dismiss=true;
      dismissRight=mVelocityTracker.getXVelocity() > 0;
    }
    if (dismiss) {
      slideOutView(mSwipeDownView,mSwipeDownChild,mDownPosition,dismissRight);
    }
 else     if (mSwiping) {
      ViewPropertyAnimator.animate(mSwipeDownView).translationX(0).alpha(1).setDuration(mAnimationTime * 9).setListener(null);
    }
    mVelocityTracker=null;
    mDownX=0;
    mSwipeDownView=null;
    mSwipeDownChild=null;
    mDownPosition=AbsListView.INVALID_POSITION;
    mSwiping=false;
    break;
  }
case MotionEvent.ACTION_MOVE:
{
  if (mVelocityTracker == null || mSwipePaused) {
    break;
  }
  mVelocityTracker.addMovement(ev);
  float deltaX=ev.getRawX() - mDownX;
  if (isSwipeDirectionValid(deltaX)) {
    if (Math.abs(deltaX) > mSlop) {
      mSwiping=true;
      requestDisallowInterceptTouchEvent(true);
      MotionEvent cancelEvent=MotionEvent.obtain(ev);
      cancelEvent.setAction(MotionEvent.ACTION_CANCEL | (ev.getActionIndex() << MotionEvent.ACTION_POINTER_INDEX_SHIFT));
      super.onTouchEvent(cancelEvent);
    }
  }
 else {
    mDownX=ev.getRawX();
    deltaX=0;
  }
  if (mSwiping) {
    ViewHelper.setTranslationX(mSwipeDownView,deltaX);
    return true;
  }
  break;
}
}
return super.onTouchEvent(ev);
}
