{
  final ViewGroup.LayoutParams lp=dismissView.getLayoutParams();
  final int originalHeight=dismissView.getHeight();
  ValueAnimator animator=ValueAnimator.ofInt(originalHeight,1).setDuration(mAnimationTime);
  animator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      --mDismissAnimationRefCount;
      if (mDismissAnimationRefCount == 0) {
        Collections.sort(mPendingDismisses);
        int[] dismissPositions=new int[mPendingDismisses.size()];
        for (int i=mPendingDismisses.size() - 1; i >= 0; i--) {
          dismissPositions[i]=mPendingDismisses.get(i).position;
        }
        mCallbacks.onDismiss(mListView,dismissPositions);
        mDownPosition=ListView.INVALID_POSITION;
        ViewGroup.LayoutParams lp;
        for (        PendingDismissData pendingDismiss : mPendingDismisses) {
          AnimatorProxy.wrap(pendingDismiss.view).setAlpha(1f);
          AnimatorProxy.wrap(pendingDismiss.view).setTranslationX(0);
          lp=pendingDismiss.view.getLayoutParams();
          lp.height=originalHeight;
          pendingDismiss.view.setLayoutParams(lp);
        }
        long time=SystemClock.uptimeMillis();
        MotionEvent cancelEvent=MotionEvent.obtain(time,time,MotionEvent.ACTION_CANCEL,0,0,0);
        mListView.dispatchTouchEvent(cancelEvent);
        mPendingDismisses.clear();
      }
    }
  }
);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      lp.height=(Integer)valueAnimator.getAnimatedValue();
      dismissView.setLayoutParams(lp);
    }
  }
);
  mPendingDismisses.add(new PendingDismissData(dismissPosition,dismissView));
  animator.start();
}
