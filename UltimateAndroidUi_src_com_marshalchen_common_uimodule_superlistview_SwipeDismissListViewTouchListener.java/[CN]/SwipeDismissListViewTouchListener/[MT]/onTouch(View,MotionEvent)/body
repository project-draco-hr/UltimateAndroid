{
  if (mViewWidth < 2) {
    mViewWidth=mListView.getWidth();
  }
switch (MotionEventCompat.getActionMasked(motionEvent)) {
case MotionEvent.ACTION_DOWN:
{
      if (mPaused) {
        return false;
      }
      Rect rect=new Rect();
      int childCount=mListView.getChildCount();
      int[] listViewCoords=new int[2];
      mListView.getLocationOnScreen(listViewCoords);
      int x=(int)motionEvent.getRawX() - listViewCoords[0];
      int y=(int)motionEvent.getRawY() - listViewCoords[1];
      View child;
      for (int i=0; i < childCount; i++) {
        child=mListView.getChildAt(i);
        child.getHitRect(rect);
        if (rect.contains(x,y)) {
          mDownView=child;
          mDownViewProxy=AnimatorProxy.wrap(child);
          break;
        }
      }
      if (mDownView != null) {
        mDownX=motionEvent.getRawX();
        mDownY=motionEvent.getRawY();
        mDownPosition=mListView.getPositionForView(mDownView);
        if (mCallbacks.canDismiss(mDownPosition)) {
          mVelocityTracker=VelocityTracker.obtain();
          mVelocityTracker.addMovement(motionEvent);
        }
 else {
          mDownView=null;
          mDownViewProxy=null;
        }
      }
      return false;
    }
case MotionEvent.ACTION_CANCEL:
{
    if (mVelocityTracker == null) {
      break;
    }
    if (mDownView != null && mSwiping) {
      animate(mDownView).translationX(0).alpha(1).setDuration(mAnimationTime).setListener(null);
    }
    mVelocityTracker.recycle();
    mVelocityTracker=null;
    mDownX=0;
    mDownY=0;
    mDownView=null;
    mDownViewProxy=null;
    mDownPosition=ListView.INVALID_POSITION;
    mSwiping=false;
    break;
  }
case MotionEvent.ACTION_UP:
{
  if (mVelocityTracker == null) {
    break;
  }
  float deltaX=motionEvent.getRawX() - mDownX;
  mVelocityTracker.addMovement(motionEvent);
  mVelocityTracker.computeCurrentVelocity(1000);
  float velocityX=mVelocityTracker.getXVelocity();
  float absVelocityX=Math.abs(velocityX);
  float absVelocityY=Math.abs(mVelocityTracker.getYVelocity());
  boolean dismiss=false;
  boolean dismissRight=false;
  if (Math.abs(deltaX) > mViewWidth / 2 && mSwiping) {
    dismiss=true;
    dismissRight=deltaX > 0;
  }
 else   if (mMinFlingVelocity <= absVelocityX && absVelocityX <= mMaxFlingVelocity && absVelocityY < absVelocityX && mSwiping) {
    dismiss=(velocityX < 0) == (deltaX < 0);
    dismissRight=mVelocityTracker.getXVelocity() > 0;
  }
  if (dismiss && mDownPosition != ListView.INVALID_POSITION) {
    final View downView=mDownView;
    final int downPosition=mDownPosition;
    ++mDismissAnimationRefCount;
    animate(mDownView).translationX(dismissRight ? mViewWidth : -mViewWidth).alpha(0).setDuration(mAnimationTime).setListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        performDismiss(downView,downPosition);
      }
    }
);
  }
 else {
    animate(mDownView).translationX(0).alpha(1).setDuration(mAnimationTime).setListener(null);
  }
  mVelocityTracker.recycle();
  mVelocityTracker=null;
  mDownX=0;
  mDownY=0;
  mDownView=null;
  mDownViewProxy=null;
  mDownPosition=ListView.INVALID_POSITION;
  mSwiping=false;
  break;
}
case MotionEvent.ACTION_MOVE:
{
if (mVelocityTracker == null || mPaused) {
  break;
}
mVelocityTracker.addMovement(motionEvent);
float deltaX=motionEvent.getRawX() - mDownX;
float deltaY=motionEvent.getRawY() - mDownY;
if (Math.abs(deltaX) > mSlop && Math.abs(deltaY) < Math.abs(deltaX) / 2) {
  mSwiping=true;
  mSwipingSlop=(deltaX > 0 ? mSlop : -mSlop);
  mListView.requestDisallowInterceptTouchEvent(true);
  MotionEvent cancelEvent=MotionEvent.obtain(motionEvent);
  cancelEvent.setAction(MotionEvent.ACTION_CANCEL | (MotionEventCompat.getActionIndex(motionEvent) << MotionEventCompat.ACTION_POINTER_INDEX_SHIFT));
  mListView.onTouchEvent(cancelEvent);
  cancelEvent.recycle();
}
if (mSwiping) {
  mDownViewProxy.setTranslationX(deltaX - mSwipingSlop);
  mDownViewProxy.setAlpha(Math.max(0f,Math.min(1f,1f - 2f * Math.abs(deltaX) / mViewWidth)));
  return true;
}
break;
}
}
return false;
}
