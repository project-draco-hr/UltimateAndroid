{
  if (DBG)   Log.d(TAG,"moveTheChildren deltaY: " + deltaY + "incrementalDeltaY: "+ incrementalDeltaY);
  if (!hasChildren())   return true;
  final int firstTop=getHighestChildTop();
  final int lastBottom=getLowestChildBottom();
  int effectivePaddingTop=0;
  int effectivePaddingBottom=0;
  if (mClipToPadding) {
    effectivePaddingTop=getListPaddingTop();
    effectivePaddingBottom=getListPaddingBottom();
  }
  final int gridHeight=getHeight();
  final int spaceAbove=effectivePaddingTop - getFirstChildTop();
  final int end=gridHeight - effectivePaddingBottom;
  final int spaceBelow=getLastChildBottom() - end;
  final int height=gridHeight - getListPaddingBottom() - getListPaddingTop();
  if (incrementalDeltaY < 0) {
    incrementalDeltaY=Math.max(-(height - 1),incrementalDeltaY);
  }
 else {
    incrementalDeltaY=Math.min(height - 1,incrementalDeltaY);
  }
  final int firstPosition=mFirstPosition;
  int maxTop=getListPaddingTop();
  int maxBottom=gridHeight - getListPaddingBottom();
  int childCount=getChildCount();
  final boolean cannotScrollDown=(firstPosition == 0 && firstTop >= maxTop && incrementalDeltaY >= 0);
  final boolean cannotScrollUp=(firstPosition + childCount == mItemCount && lastBottom <= maxBottom && incrementalDeltaY <= 0);
  if (DBG) {
    Log.d(TAG,"moveTheChildren " + " firstTop " + firstTop + " maxTop "+ maxTop+ " incrementalDeltaY "+ incrementalDeltaY);
    Log.d(TAG,"moveTheChildren " + " lastBottom " + lastBottom + " maxBottom "+ maxBottom+ " incrementalDeltaY "+ incrementalDeltaY);
  }
  if (cannotScrollDown) {
    if (DBG)     Log.d(TAG,"moveTheChildren cannotScrollDown " + cannotScrollDown);
    return incrementalDeltaY != 0;
  }
  if (cannotScrollUp) {
    if (DBG)     Log.d(TAG,"moveTheChildren cannotScrollUp " + cannotScrollUp);
    return incrementalDeltaY != 0;
  }
  final boolean isDown=incrementalDeltaY < 0;
  final int headerViewsCount=getHeaderViewsCount();
  final int footerViewsStart=mItemCount - getFooterViewsCount();
  int start=0;
  int count=0;
  if (isDown) {
    int top=-incrementalDeltaY;
    if (mClipToPadding) {
      top+=getListPaddingTop();
    }
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      if (child.getBottom() >= top) {
        break;
      }
 else {
        count++;
        int position=firstPosition + i;
        if (position >= headerViewsCount && position < footerViewsStart) {
          mRecycleBin.addScrapView(child,position);
        }
      }
    }
  }
 else {
    int bottom=gridHeight - incrementalDeltaY;
    if (mClipToPadding) {
      bottom-=getListPaddingBottom();
    }
    for (int i=childCount - 1; i >= 0; i--) {
      final View child=getChildAt(i);
      if (child.getTop() <= bottom) {
        break;
      }
 else {
        start=i;
        count++;
        int position=firstPosition + i;
        if (position >= headerViewsCount && position < footerViewsStart) {
          mRecycleBin.addScrapView(child,position);
        }
      }
    }
  }
  mBlockLayoutRequests=true;
  if (count > 0) {
    if (DBG)     Log.d(TAG,"scrap - detachViewsFromParent start:" + start + " count:"+ count);
    detachViewsFromParent(start,count);
    mRecycleBin.removeSkippedScrap();
    onChildrenDetached(start,count);
  }
  if (!awakenScrollBars()) {
    invalidate();
  }
  offsetChildrenTopAndBottom(incrementalDeltaY);
  if (isDown) {
    mFirstPosition+=count;
  }
  final int absIncrementalDeltaY=Math.abs(incrementalDeltaY);
  if (spaceAbove < absIncrementalDeltaY || spaceBelow < absIncrementalDeltaY) {
    fillGap(isDown);
  }
  mBlockLayoutRequests=false;
  invokeOnItemScrollListener();
  return false;
}
