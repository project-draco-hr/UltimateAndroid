{
  mShouldDraw=true;
  if (!mIsFoldPrepared) {
    return;
  }
  if (mFoldFactor == 1) {
    mShouldDraw=false;
    return;
  }
  if (mFoldFactor == 0 && mPreviousFoldFactor > 0 && mFoldListener != null) {
    mFoldListener.onEndFold();
  }
  if (mPreviousFoldFactor == 0 && mFoldFactor > 0 && mFoldListener != null) {
    mFoldListener.onStartFold();
  }
  mPreviousFoldFactor=mFoldFactor;
  for (int x=0; x < mNumberOfFolds; x++) {
    mMatrix[x].reset();
  }
  float cTranslationFactor=1 - mFoldFactor;
  float translatedDistance=mIsHorizontal ? mOriginalWidth * cTranslationFactor : mOriginalHeight * cTranslationFactor;
  float translatedDistancePerFold=Math.round(translatedDistance / mNumberOfFolds);
  mFoldDrawWidth=mFoldMaxWidth < translatedDistancePerFold ? translatedDistancePerFold : mFoldMaxWidth;
  mFoldDrawHeight=mFoldMaxHeight < translatedDistancePerFold ? translatedDistancePerFold : mFoldMaxHeight;
  float translatedDistanceFoldSquared=translatedDistancePerFold * translatedDistancePerFold;
  float depth=mIsHorizontal ? (float)Math.sqrt((double)(mFoldDrawWidth * mFoldDrawWidth - translatedDistanceFoldSquared)) : (float)Math.sqrt((double)(mFoldDrawHeight * mFoldDrawHeight - translatedDistanceFoldSquared));
  float scaleFactor=DEPTH_CONSTANT / (DEPTH_CONSTANT + depth);
  float scaledWidth, scaledHeight, bottomScaledPoint, topScaledPoint, rightScaledPoint, leftScaledPoint;
  if (mIsHorizontal) {
    scaledWidth=mFoldDrawWidth * cTranslationFactor;
    scaledHeight=mFoldDrawHeight * scaleFactor;
  }
 else {
    scaledWidth=mFoldDrawWidth * scaleFactor;
    scaledHeight=mFoldDrawHeight * cTranslationFactor;
  }
  topScaledPoint=(mFoldDrawHeight - scaledHeight) / 2.0f;
  bottomScaledPoint=topScaledPoint + scaledHeight;
  leftScaledPoint=(mFoldDrawWidth - scaledWidth) / 2.0f;
  rightScaledPoint=leftScaledPoint + scaledWidth;
  float anchorPoint=mIsHorizontal ? mAnchorFactor * mOriginalWidth : mAnchorFactor * mOriginalHeight;
  float midFold=mIsHorizontal ? (anchorPoint / mFoldDrawWidth) : anchorPoint / mFoldDrawHeight;
  mSrc[0]=0;
  mSrc[1]=0;
  mSrc[2]=0;
  mSrc[3]=mFoldDrawHeight;
  mSrc[4]=mFoldDrawWidth;
  mSrc[5]=0;
  mSrc[6]=mFoldDrawWidth;
  mSrc[7]=mFoldDrawHeight;
  for (int x=0; x < mNumberOfFolds; x++) {
    boolean isEven=(x % 2 == 0);
    if (mIsHorizontal) {
      mDst[0]=(anchorPoint > x * mFoldDrawWidth) ? anchorPoint + (x - midFold) * scaledWidth : anchorPoint - (midFold - x) * scaledWidth;
      mDst[1]=isEven ? 0 : topScaledPoint;
      mDst[2]=mDst[0];
      mDst[3]=isEven ? mFoldDrawHeight : bottomScaledPoint;
      mDst[4]=(anchorPoint > (x + 1) * mFoldDrawWidth) ? anchorPoint + (x + 1 - midFold) * scaledWidth : anchorPoint - (midFold - x - 1) * scaledWidth;
      mDst[5]=isEven ? topScaledPoint : 0;
      mDst[6]=mDst[4];
      mDst[7]=isEven ? bottomScaledPoint : mFoldDrawHeight;
    }
 else {
      mDst[0]=isEven ? 0 : leftScaledPoint;
      mDst[1]=(anchorPoint > x * mFoldDrawHeight) ? anchorPoint + (x - midFold) * scaledHeight : anchorPoint - (midFold - x) * scaledHeight;
      mDst[2]=isEven ? leftScaledPoint : 0;
      mDst[3]=(anchorPoint > (x + 1) * mFoldDrawHeight) ? anchorPoint + (x + 1 - midFold) * scaledHeight : anchorPoint - (midFold - x - 1) * scaledHeight;
      mDst[4]=isEven ? mFoldDrawWidth : rightScaledPoint;
      mDst[5]=mDst[1];
      mDst[6]=isEven ? rightScaledPoint : mFoldDrawWidth;
      mDst[7]=mDst[3];
    }
    for (int y=0; y < 8; y++) {
      mDst[y]=Math.round(mDst[y]);
    }
    if (mIsHorizontal) {
      if (mDst[4] <= mDst[0] || mDst[6] <= mDst[2]) {
        mShouldDraw=false;
        return;
      }
    }
 else {
      if (mDst[3] <= mDst[1] || mDst[7] <= mDst[5]) {
        mShouldDraw=false;
        return;
      }
    }
    mMatrix[x].setPolyToPoly(mSrc,0,mDst,0,NUM_OF_POLY_POINTS / 2);
  }
  int alpha=(int)(mFoldFactor * 255 * SHADING_ALPHA);
  mSolidShadow.setColor(Color.argb(alpha,0,0,0));
  if (mIsHorizontal) {
    mShadowGradientMatrix.setScale(mFoldDrawWidth,1);
    mShadowLinearGradient.setLocalMatrix(mShadowGradientMatrix);
  }
 else {
    mShadowGradientMatrix.setScale(1,mFoldDrawHeight);
    mShadowLinearGradient.setLocalMatrix(mShadowGradientMatrix);
  }
  mGradientShadow.setAlpha(alpha);
}
