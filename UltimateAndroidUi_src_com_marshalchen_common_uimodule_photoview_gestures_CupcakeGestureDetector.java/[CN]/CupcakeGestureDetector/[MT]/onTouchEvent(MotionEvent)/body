{
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
{
      mVelocityTracker=VelocityTracker.obtain();
      if (null != mVelocityTracker) {
        mVelocityTracker.addMovement(ev);
      }
 else {
        Log.i(LOG_TAG,"Velocity tracker is null");
      }
      mLastTouchX=getActiveX(ev);
      mLastTouchY=getActiveY(ev);
      mIsDragging=false;
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    final float x=getActiveX(ev);
    final float y=getActiveY(ev);
    final float dx=x - mLastTouchX, dy=y - mLastTouchY;
    if (!mIsDragging) {
      mIsDragging=FloatMath.sqrt((dx * dx) + (dy * dy)) >= mTouchSlop;
    }
    if (mIsDragging) {
      mListener.onDrag(dx,dy);
      mLastTouchX=x;
      mLastTouchY=y;
      if (null != mVelocityTracker) {
        mVelocityTracker.addMovement(ev);
      }
    }
    break;
  }
case MotionEvent.ACTION_CANCEL:
{
  if (null != mVelocityTracker) {
    mVelocityTracker.recycle();
    mVelocityTracker=null;
  }
  break;
}
case MotionEvent.ACTION_UP:
{
if (mIsDragging) {
  if (null != mVelocityTracker) {
    mLastTouchX=getActiveX(ev);
    mLastTouchY=getActiveY(ev);
    mVelocityTracker.addMovement(ev);
    mVelocityTracker.computeCurrentVelocity(1000);
    final float vX=mVelocityTracker.getXVelocity(), vY=mVelocityTracker.getYVelocity();
    if (Math.max(Math.abs(vX),Math.abs(vY)) >= mMinimumVelocity) {
      mListener.onFling(mLastTouchX,mLastTouchY,-vX,-vY);
    }
  }
}
if (null != mVelocityTracker) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
break;
}
}
return true;
}
