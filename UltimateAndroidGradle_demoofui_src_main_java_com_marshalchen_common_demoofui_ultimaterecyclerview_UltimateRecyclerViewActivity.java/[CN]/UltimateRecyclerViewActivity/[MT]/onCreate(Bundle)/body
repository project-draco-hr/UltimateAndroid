{
  super.onCreate(savedInstanceState);
  setContentView(R.layout.ultimate_recyclerview_activity);
  toolbar=(Toolbar)findViewById(R.id.tool_bar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayShowTitleEnabled(false);
  ultimateRecyclerView=(UltimateRecyclerView)findViewById(R.id.ultimate_recycler_view);
  ultimateRecyclerView.setHasFixedSize(false);
  final List<String> stringList=new ArrayList<>();
  stringList.add("111");
  stringList.add("aaa");
  stringList.add("222");
  stringList.add("33");
  stringList.add("44");
  stringList.add("55");
  stringList.add("66");
  stringList.add("11771");
  simpleRecyclerViewAdapter=new SimpleAdapter(stringList);
  linearLayoutManager=new LinearLayoutManager(this);
  ultimateRecyclerView.setLayoutManager(linearLayoutManager);
  ultimateRecyclerView.setAdapter(simpleRecyclerViewAdapter);
  StickyRecyclerHeadersDecoration headersDecor=new StickyRecyclerHeadersDecoration(simpleRecyclerViewAdapter);
  ultimateRecyclerView.addItemDecoration(headersDecor);
  ultimateRecyclerView.enableLoadmore();
  simpleRecyclerViewAdapter.setCustomLoadMoreView(LayoutInflater.from(this).inflate(R.layout.custom_bottom_progressbar,null));
  ultimateRecyclerView.setParallaxHeader(getLayoutInflater().inflate(R.layout.parallax_recyclerview_header,ultimateRecyclerView.mRecyclerView,false));
  ultimateRecyclerView.setOnParallaxScroll(new UltimateRecyclerView.OnParallaxScroll(){
    @Override public void onParallaxScroll(    float percentage,    float offset,    View parallax){
      Drawable c=toolbar.getBackground();
      c.setAlpha(Math.round(127 + percentage * 128));
      toolbar.setBackgroundDrawable(c);
    }
  }
);
  ultimateRecyclerView.setRecylerViewBackgroundColor(Color.parseColor("#ffffff"));
  ultimateRecyclerView.setDefaultOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          simpleRecyclerViewAdapter.insert(moreNum++ + "  Refresh things",0);
          ultimateRecyclerView.setRefreshing(false);
          linearLayoutManager.scrollToPosition(0);
        }
      }
,1000);
    }
  }
);
  ultimateRecyclerView.setOnLoadMoreListener(new UltimateRecyclerView.OnLoadMoreListener(){
    @Override public void loadMore(    int itemsCount,    final int maxLastVisiblePosition){
      Handler handler=new Handler();
      handler.postDelayed(new Runnable(){
        public void run(){
          simpleRecyclerViewAdapter.insert("More " + moreNum++,simpleRecyclerViewAdapter.getAdapterItemCount());
          simpleRecyclerViewAdapter.insert("More " + moreNum++,simpleRecyclerViewAdapter.getAdapterItemCount());
          simpleRecyclerViewAdapter.insert("More " + moreNum++,simpleRecyclerViewAdapter.getAdapterItemCount());
        }
      }
,1000);
    }
  }
);
  ultimateRecyclerView.setScrollViewCallbacks(new ObservableScrollViewCallbacks(){
    @Override public void onScrollChanged(    int scrollY,    boolean firstScroll,    boolean dragging){
    }
    @Override public void onDownMotionEvent(){
    }
    @Override public void onUpOrCancelMotionEvent(    ObservableScrollState observableScrollState){
      if (observableScrollState == ObservableScrollState.DOWN) {
        ultimateRecyclerView.showToolbar(toolbar,ultimateRecyclerView,getScreenHeight());
        ultimateRecyclerView.showFloatingActionMenu();
      }
 else       if (observableScrollState == ObservableScrollState.UP) {
        ultimateRecyclerView.hideToolbar(toolbar,ultimateRecyclerView,getScreenHeight());
        ultimateRecyclerView.hideFloatingActionMenu();
      }
 else       if (observableScrollState == ObservableScrollState.STOP) {
      }
    }
  }
);
  ultimateRecyclerView.showFloatingButtonView();
  ultimateRecyclerView.addOnItemTouchListener(new SwipeableRecyclerViewTouchListener(ultimateRecyclerView.mRecyclerView,new SwipeableRecyclerViewTouchListener.SwipeListener(){
    @Override public boolean canSwipe(    int position){
      if (position > 0)       return true;
 else       return false;
    }
    @Override public void onDismissedBySwipeLeft(    RecyclerView recyclerView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        simpleRecyclerViewAdapter.remove(position);
      }
      simpleRecyclerViewAdapter.notifyDataSetChanged();
    }
    @Override public void onDismissedBySwipeRight(    RecyclerView recyclerView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        simpleRecyclerViewAdapter.remove(position);
      }
      simpleRecyclerViewAdapter.notifyDataSetChanged();
    }
  }
));
  ItemTouchListenerAdapter itemTouchListenerAdapter=new ItemTouchListenerAdapter(ultimateRecyclerView.mRecyclerView,new ItemTouchListenerAdapter.RecyclerViewOnItemClickListener(){
    @Override public void onItemClick(    RecyclerView parent,    View clickedView,    int position){
    }
    @Override public void onItemLongClick(    RecyclerView parent,    View clickedView,    int position){
      URLogs.d("onItemLongClick()" + isDrag);
      if (isDrag) {
        URLogs.d("onItemLongClick()" + isDrag);
        dragDropTouchListener.startDrag();
        ultimateRecyclerView.enableDefaultSwipeRefresh(false);
      }
    }
  }
);
  ultimateRecyclerView.mRecyclerView.addOnItemTouchListener(itemTouchListenerAdapter);
  dragDropTouchListener=new DragDropTouchListener(ultimateRecyclerView.mRecyclerView,this){
    @Override protected void onItemSwitch(    RecyclerView recyclerView,    int from,    int to){
      if (from > 0 && to > 0) {
        simpleRecyclerViewAdapter.swapPositions(from,to);
        URLogs.d("switch----");
      }
    }
    @Override protected void onItemDrop(    RecyclerView recyclerView,    int position){
      URLogs.d("drop----");
      ultimateRecyclerView.enableDefaultSwipeRefresh(true);
      simpleRecyclerViewAdapter.notifyDataSetChanged();
    }
  }
;
  dragDropTouchListener.setCustomDragHighlight(getResources().getDrawable(R.drawable.custom_drag_frame));
  ultimateRecyclerView.mRecyclerView.addOnItemTouchListener(dragDropTouchListener);
  Spinner spinner=(Spinner)findViewById(R.id.spinner);
  ArrayAdapter<String> spinnerAdapter=new ArrayAdapter<>(this,android.R.layout.simple_list_item_1);
  for (  Type type : Type.values()) {
    spinnerAdapter.add(type.name());
  }
  spinner.setAdapter(spinnerAdapter);
  spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      ultimateRecyclerView.setItemAnimator(Type.values()[position].getAnimator());
      ultimateRecyclerView.getItemAnimator().setAddDuration(300);
      ultimateRecyclerView.getItemAnimator().setRemoveDuration(300);
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  findViewById(R.id.add).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      simpleRecyclerViewAdapter.insert("newly added item",1);
    }
  }
);
  findViewById(R.id.del).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      simpleRecyclerViewAdapter.remove(1);
    }
  }
);
}
