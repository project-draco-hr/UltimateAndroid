{
  final int childCount=getChildCount();
  if (childCount == 0 || delta == 0) {
    return 0;
  }
  final int start=getStartWithPadding();
  final int end=getEndWithPadding();
  final int firstPosition=getFirstVisiblePosition();
  final int totalSpace=getTotalSpace();
  if (delta < 0) {
    delta=Math.max(-(totalSpace - 1),delta);
  }
 else {
    delta=Math.min(totalSpace - 1,delta);
  }
  final boolean cannotScrollBackward=(firstPosition == 0 && mLayoutStart >= start && delta <= 0);
  final boolean cannotScrollForward=(firstPosition + childCount == state.getItemCount() && mLayoutEnd <= end && delta >= 0);
  if (cannotScrollForward || cannotScrollBackward) {
    return 0;
  }
  offsetChildren(-delta);
  final Direction direction=(delta > 0 ? Direction.END : Direction.START);
  recycleChildrenOutOfBounds(direction,recycler);
  final int absDelta=Math.abs(delta);
  if (canAddMoreViews(Direction.START,start - absDelta) || canAddMoreViews(Direction.END,end + absDelta)) {
    fillGap(direction,recycler,state);
  }
  return delta;
}
