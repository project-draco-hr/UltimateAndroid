{
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mPageCount <= 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  boolean needsInvalidate=false;
switch (action & MotionEventCompat.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      mScroller.abortAnimation();
      mLastMotionX=mInitialMotionX=ev.getX();
      mLastMotionY=mInitialMotionY=ev.getY();
      mActivePointerId=MotionEventCompat.getPointerId(ev,0);
      DEBUG_LOG("Down at " + mLastMotionX + ","+ mLastMotionY+ " mIsBeingDragged="+ mIsBeingDragged+ " mIsUnableToDrag="+ mIsUnableToDrag);
      if (!mIsBeingDragged && mScrollState == SCROLL_STATE_IDLE) {
        mLastPosition=getPositionByXY((int)mLastMotionX,(int)mLastMotionY);
      }
 else {
        mLastPosition=-1;
      }
      if (mLastPosition >= 0) {
        mLastDownTime=System.currentTimeMillis();
      }
 else {
        mLastDownTime=Long.MAX_VALUE;
      }
      DEBUG_LOG("Down at mLastPosition=" + mLastPosition);
      mLastDragged=-1;
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    final int pointerIndex=MotionEventCompat.findPointerIndex(ev,mActivePointerId);
    final float x=MotionEventCompat.getX(ev,pointerIndex);
    final float y=MotionEventCompat.getY(ev,pointerIndex);
    if (mLastDragged >= 0) {
      final View v=getChildAt(mLastDragged);
      final int l=getScrollX() + (int)x - v.getWidth() / 2;
      final int t=getScrollY() + (int)y - v.getHeight() / 2;
      v.layout(l,t,l + v.getWidth(),t + v.getHeight());
      if (mScrollState == SCROLL_STATE_IDLE) {
        final int target=getTargetByXY((int)x,(int)y);
        if (target != -1 && mLastTarget != target) {
          animateGap(target);
          mLastTarget=target;
          DEBUG_LOG("Moved to mLastTarget=" + mLastTarget);
        }
        final int edge=getEdgeByXY((int)x,(int)y);
        if (mLastEdge == -1) {
          if (edge != mLastEdge) {
            mLastEdge=edge;
            mLastEdgeTime=System.currentTimeMillis();
          }
        }
 else {
          if (edge != mLastEdge) {
            mLastEdge=-1;
          }
 else {
            if ((System.currentTimeMillis() - mLastEdgeTime) >= EDGE_HOLD_DURATION) {
              performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
              triggerSwipe(edge);
              mLastEdge=-1;
            }
          }
        }
      }
    }
 else     if (!mIsBeingDragged) {
      final float xDiff=Math.abs(x - mLastMotionX);
      final float yDiff=Math.abs(y - mLastMotionY);
      DEBUG_LOG("Moved to " + x + ","+ y+ " diff="+ xDiff+ ","+ yDiff);
      if (xDiff > mTouchSlop && xDiff > yDiff) {
        DEBUG_LOG("Starting drag!");
        mIsBeingDragged=true;
        requestParentDisallowInterceptTouchEvent(true);
        mLastMotionX=x - mInitialMotionX > 0 ? mInitialMotionX + mTouchSlop : mInitialMotionX - mTouchSlop;
        mLastMotionY=y;
        setScrollState(SCROLL_STATE_DRAGGING);
        setScrollingCacheEnabled(true);
      }
    }
    if (mIsBeingDragged) {
      needsInvalidate|=performDrag(x);
    }
 else     if (mLastPosition >= 0) {
      final int currentPosition=getPositionByXY((int)x,(int)y);
      DEBUG_LOG("Moved to currentPosition=" + currentPosition);
      if (currentPosition == mLastPosition) {
        if ((System.currentTimeMillis() - mLastDownTime) >= LONG_CLICK_DURATION) {
          if (onItemLongClick(currentPosition)) {
            performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
            mLastDragged=mLastPosition;
            requestParentDisallowInterceptTouchEvent(true);
            mLastTarget=-1;
            animateDragged();
            mLastPosition=-1;
          }
          mLastDownTime=Long.MAX_VALUE;
        }
      }
 else {
        mLastPosition=-1;
      }
    }
    break;
  }
case MotionEvent.ACTION_UP:
{
  DEBUG_LOG("Touch up!!!");
  final int pointerIndex=MotionEventCompat.findPointerIndex(ev,mActivePointerId);
  final float x=MotionEventCompat.getX(ev,pointerIndex);
  final float y=MotionEventCompat.getY(ev,pointerIndex);
  if (mLastDragged >= 0) {
    rearrange();
  }
 else   if (mIsBeingDragged) {
    final VelocityTracker velocityTracker=mVelocityTracker;
    velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
    int initialVelocity=(int)VelocityTrackerCompat.getXVelocity(velocityTracker,mActivePointerId);
    final int width=getWidth();
    final int scrollX=getScrollX();
    final int currentPage=scrollX / width;
    final int offsetPixels=scrollX - currentPage * width;
    final float pageOffset=(float)offsetPixels / (float)width;
    final int totalDelta=(int)(x - mInitialMotionX);
    int nextPage=determineTargetPage(currentPage,pageOffset,initialVelocity,totalDelta);
    setCurrentItemInternal(nextPage,true,true,initialVelocity);
    mActivePointerId=INVALID_POINTER;
    endDrag();
  }
 else   if (mLastPosition >= 0) {
    final int currentPosition=getPositionByXY((int)x,(int)y);
    DEBUG_LOG("Touch up!!! currentPosition=" + currentPosition);
    if (currentPosition == mLastPosition) {
      onItemClick(currentPosition);
    }
  }
  break;
}
case MotionEvent.ACTION_CANCEL:
DEBUG_LOG("Touch cancel!!!");
if (mLastDragged >= 0) {
rearrange();
}
 else if (mIsBeingDragged) {
scrollToItem(mCurItem,true,0,false);
mActivePointerId=INVALID_POINTER;
endDrag();
}
break;
case MotionEventCompat.ACTION_POINTER_DOWN:
{
final int index=MotionEventCompat.getActionIndex(ev);
final float x=MotionEventCompat.getX(ev,index);
mLastMotionX=x;
mActivePointerId=MotionEventCompat.getPointerId(ev,index);
break;
}
case MotionEventCompat.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
mLastMotionX=MotionEventCompat.getX(ev,MotionEventCompat.findPointerIndex(ev,mActivePointerId));
break;
}
if (needsInvalidate) {
ViewCompat.postInvalidateOnAnimation(this);
}
return true;
}
