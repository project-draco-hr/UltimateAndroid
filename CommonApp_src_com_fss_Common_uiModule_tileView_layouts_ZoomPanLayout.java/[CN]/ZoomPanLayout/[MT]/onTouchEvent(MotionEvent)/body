{
  processEvent(event);
  final int action=event.getAction() & MotionEvent.ACTION_MASK;
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (!scroller.isFinished()) {
      scroller.abortAnimation();
    }
  isBeingFlung=false;
isDragging=false;
setTapInterrupted(false);
saveFirstFingerDown();
saveTapActionOrigination();
for (GestureListener listener : gestureListeners) {
listener.onFingerDown(actualPoint);
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
isPinching=false;
saveSecondFingerDown();
setTapInterrupted(true);
for (GestureListener listener : gestureListeners) {
listener.onFingerDown(actualPoint);
}
break;
case MotionEvent.ACTION_MOVE:
if (firstFingerIsDown && secondFingerIsDown) {
if (!isPinching) {
double firstFingerDistance=getDistance(firstFinger,firstFingerLastDown);
double secondFingerDistance=getDistance(secondFinger,secondFingerLastDown);
double distance=(firstFingerDistance + secondFingerDistance) * 0.5;
isPinching=distance >= pinchStartThreshold;
if (isPinching) {
saveHistoricalPinchDistance();
saveHistoricalScale();
savePinchHistory();
for (GestureListener listener : gestureListeners) {
listener.onPinchStart(pinchStartOffset);
}
for (ZoomPanListener listener : zoomPanListeners) {
listener.onZoomStart(scale);
listener.onZoomPanEvent();
}
}
}
if (isPinching) {
setScaleFromPinch();
maintainScrollDuringPinchOperation();
for (GestureListener listener : gestureListeners) {
listener.onPinch(pinchStartOffset);
}
}
}
 else {
if (!isDragging) {
double distance=getDistance(firstFinger,firstFingerLastDown);
isDragging=distance >= dragStartThreshold;
}
if (isDragging) {
performDrag();
for (GestureListener listener : gestureListeners) {
listener.onDrag(actualPoint);
}
}
}
break;
case MotionEvent.ACTION_UP:
if (performFling()) {
isBeingFlung=true;
Point startPoint=new Point(getScrollX(),getScrollY());
Point finalPoint=new Point(scroller.getFinalX(),scroller.getFinalY());
for (GestureListener listener : gestureListeners) {
listener.onFling(startPoint,finalPoint);
}
}
if (velocity != null) {
velocity.recycle();
velocity=null;
}
if (determineIfQualifiedSingleTap()) {
for (GestureListener listener : gestureListeners) {
listener.onTap(actualPoint);
}
}
if (determineIfQualifiedDoubleTap()) {
scroller.forceFinished(true);
saveHistoricalScale();
saveDoubleTapHistory();
double destination;
if (scale >= maxScale) {
destination=minScale;
}
 else {
destination=Math.min(maxScale,scale * 2);
}
startSmoothScaleTo(destination,ZOOM_ANIMATION_DURATION);
for (GestureListener listener : gestureListeners) {
listener.onDoubleTap(actualPoint);
}
}
for (GestureListener listener : gestureListeners) {
listener.onFingerUp(actualPoint);
}
saveDoubleTapOrigination();
isDragging=false;
isPinching=false;
break;
case MotionEvent.ACTION_POINTER_UP:
isPinching=false;
setTapInterrupted(true);
for (GestureListener listener : gestureListeners) {
listener.onFingerUp(actualPoint);
}
for (GestureListener listener : gestureListeners) {
listener.onPinchComplete(pinchStartOffset);
}
for (ZoomPanListener listener : zoomPanListeners) {
listener.onZoomComplete(scale);
listener.onZoomPanEvent();
}
break;
}
return true;
}
