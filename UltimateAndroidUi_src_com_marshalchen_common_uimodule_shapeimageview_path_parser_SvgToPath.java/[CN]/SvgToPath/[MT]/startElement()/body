{
  String localName=atts.getName();
  if (inDefsElement) {
    return;
  }
  if (localName.equals("svg")) {
    width=Math.round(getFloatAttr("width",atts,0f));
    height=Math.round(getFloatAttr("height",atts,0f));
    NumberParse viewbox=NumberParse.getNumberParseAttr("viewBox",atts);
    pushPath();
    Matrix matrix=IDENTITY_MATRIX;
    if (viewbox != null && viewbox.numbers != null && viewbox.numbers.size() == 4) {
      if (width < 0.1f || height < -0.1f) {
        width=(viewbox.numbers.get(2) - viewbox.numbers.get(0));
        width=(viewbox.numbers.get(3) - viewbox.numbers.get(3));
      }
 else {
        float sx=width / (viewbox.numbers.get(2) - viewbox.numbers.get(0));
        float sy=height / (viewbox.numbers.get(3) - viewbox.numbers.get(1));
        matrix.setScale(sx,sy);
      }
    }
    pushTransform(matrix);
  }
 else   if (localName.equals("defs")) {
    inDefsElement=true;
  }
 else   if (localName.equals("use")) {
    String href=ParseUtil.getStringAttr("xlink:href",atts);
    String attTransform=ParseUtil.getStringAttr("transform",atts);
    String attX=ParseUtil.getStringAttr("x",atts);
    String attY=ParseUtil.getStringAttr("y",atts);
    StringBuilder sb=new StringBuilder();
    sb.append("<g");
    sb.append(" xmlns='http://www.w3.org/2000/svg' ");
    sb.append(" xmlns:xlink='http://www.w3.org/1999/xlink' ");
    sb.append(" xmlns:sodipodi='http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd' ");
    sb.append(" xmlns:inkscape='http://www.inkscape.org/namespaces/inkscape' version='1.1'");
    if (attTransform != null || attX != null || attY != null) {
      sb.append(" transform='");
      if (attTransform != null) {
        sb.append(ParseUtil.escape(attTransform));
      }
      if (attX != null || attY != null) {
        sb.append("translate(");
        sb.append(attX != null ? ParseUtil.escape(attX) : "0");
        sb.append(",");
        sb.append(attY != null ? ParseUtil.escape(attY) : "0");
        sb.append(")");
      }
      sb.append("'");
    }
    for (int i=0; i < atts.getAttributeCount(); i++) {
      String attrQName=atts.getAttributeName(i);
      if (!"x".equals(attrQName) && !"y".equals(attrQName) && !"width".equals(attrQName)&& !"height".equals(attrQName)&& !"xlink:href".equals(attrQName)&& !"transform".equals(attrQName)) {
        sb.append(" ");
        sb.append(attrQName);
        sb.append("='");
        sb.append(ParseUtil.escape(atts.getAttributeValue(i)));
        sb.append("'");
      }
    }
    sb.append(">");
    sb.append(idXml.get(href.substring(1)));
    sb.append("</g>");
  }
 else   if (localName.equals("g")) {
    if (hidden) {
      hiddenLevel++;
    }
    if ("none".equals(ParseUtil.getStringAttr("display",atts))) {
      if (!hidden) {
        hidden=true;
        hiddenLevel=1;
      }
    }
    pushTransform(atts);
    pushPath();
  }
 else   if (!hidden && localName.equals("rect")) {
    Float x=getFloatAttr("x",atts,0f);
    Float y=getFloatAttr("y",atts,0f);
    Float width=getFloatAttr("width",atts);
    Float height=getFloatAttr("height",atts);
    Float rx=getFloatAttr("rx",atts,0f);
    Float ry=getFloatAttr("ry",atts,0f);
    Path p=new Path();
    if (rx <= 0f && ry <= 0f) {
      p.addRect(x,y,x + width,y + height,Path.Direction.CW);
    }
 else {
      rect.set(x,y,x + width,y + height);
      p.addRoundRect(rect,rx,ry,Path.Direction.CW);
    }
    pushTransform(atts);
    Matrix matrix=popTransform();
    p.transform(matrix);
    path.addPath(p);
  }
 else   if (!hidden && localName.equals("line")) {
    Float x1=getFloatAttr("x1",atts);
    Float x2=getFloatAttr("x2",atts);
    Float y1=getFloatAttr("y1",atts);
    Float y2=getFloatAttr("y2",atts);
    Path p=new Path();
    p.moveTo(x1,y1);
    p.lineTo(x2,y2);
    pushTransform(atts);
    Matrix matrix=popTransform();
    p.transform(matrix);
    path.addPath(p);
  }
 else   if (!hidden && localName.equals("circle")) {
    Float centerX=getFloatAttr("cx",atts);
    Float centerY=getFloatAttr("cy",atts);
    Float radius=getFloatAttr("r",atts);
    if (centerX != null && centerY != null && radius != null) {
      Path p=new Path();
      p.addCircle(centerX,centerY,radius,Path.Direction.CW);
      pushTransform(atts);
      Matrix matrix=popTransform();
      p.transform(matrix);
      path.addPath(p);
    }
  }
 else   if (!hidden && localName.equals("ellipse")) {
    Float centerX=getFloatAttr("cx",atts);
    Float centerY=getFloatAttr("cy",atts);
    Float radiusX=getFloatAttr("rx",atts);
    Float radiusY=getFloatAttr("ry",atts);
    if (centerX != null && centerY != null && radiusX != null && radiusY != null) {
      rect.set(centerX - radiusX,centerY - radiusY,centerX + radiusX,centerY + radiusY);
      Path p=new Path();
      p.addOval(rect,Path.Direction.CW);
      pushTransform(atts);
      Matrix matrix=popTransform();
      p.transform(matrix);
      path.addPath(p);
    }
  }
 else   if (!hidden && (localName.equals("polygon") || localName.equals("polyline"))) {
    NumberParse numbers=NumberParse.getNumberParseAttr("points",atts);
    if (numbers != null) {
      Path p=new Path();
      ArrayList<Float> points=numbers.numbers;
      if (points.size() > 1) {
        p.moveTo(points.get(0),points.get(1));
        for (int i=2; i < points.size(); i+=2) {
          float x=points.get(i);
          float y=points.get(i + 1);
          p.lineTo(x,y);
        }
        if (localName.equals("polygon")) {
          p.close();
        }
        pushTransform(atts);
        Matrix matrix=popTransform();
        p.transform(matrix);
        path.addPath(p);
      }
    }
  }
 else   if (!hidden && localName.equals("path")) {
    Path p=PathParser.doPath(ParseUtil.getStringAttr("d",atts));
    pushTransform(atts);
    Matrix matrix=popTransform();
    p.transform(matrix);
    path.addPath(p);
  }
 else   if (!hidden && localName.equals("metadata")) {
  }
 else   if (!hidden) {
    Log.d(TAG,String.format("Unrecognized tag: %s (%s)",localName,showAttributes(atts)));
  }
}
