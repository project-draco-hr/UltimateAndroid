{
  boolean removalsPending=!mPendingRemovals.isEmpty();
  boolean movesPending=!mPendingMoves.isEmpty();
  boolean additionsPending=!mPendingAdditions.isEmpty();
  if (!removalsPending && !movesPending && !additionsPending) {
    return;
  }
  for (  RecyclerView.ViewHolder holder : mPendingRemovals) {
    animateRemoveImpl(holder);
  }
  mPendingRemovals.clear();
  if (movesPending) {
    mMoves.addAll(mPendingMoves);
    mPendingMoves.clear();
    Runnable mover=new Runnable(){
      @Override public void run(){
        for (        MoveInfo moveInfo : mMoves) {
          animateMoveImpl(moveInfo.holder,moveInfo.fromX,moveInfo.fromY,moveInfo.toX,moveInfo.toY);
        }
        mMoves.clear();
      }
    }
;
    if (removalsPending) {
      View view=mMoves.get(0).holder.itemView;
      ViewCompat.postOnAnimationDelayed(view,mover,getRemoveDuration());
    }
 else {
      mover.run();
    }
  }
  if (additionsPending) {
    mAdditions.addAll(mPendingAdditions);
    mPendingAdditions.clear();
    Runnable adder=new Runnable(){
      public void run(){
        for (        RecyclerView.ViewHolder holder : mAdditions) {
          animateAddImpl(holder);
        }
        mAdditions.clear();
      }
    }
;
    if (removalsPending || movesPending) {
      View view=mAdditions.get(0).itemView;
      ViewCompat.postOnAnimationDelayed(view,adder,(removalsPending ? getRemoveDuration() : 0) + (movesPending ? getMoveDuration() : 0));
    }
 else {
      adder.run();
    }
  }
}
