{
  super(context,attrs,defStyle);
  Resources res=context.getResources();
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.SmoothProgressBar,defStyle,0);
  final int color=a.getColor(R.styleable.SmoothProgressBar_spb_color,res.getColor(R.color.spb_default_color));
  final int sectionsCount=a.getInteger(R.styleable.SmoothProgressBar_spb_sections_count,res.getInteger(R.integer.spb_default_sections_count));
  final int separatorLength=a.getDimensionPixelSize(R.styleable.SmoothProgressBar_spb_stroke_separator_length,res.getDimensionPixelSize(R.dimen.spb_default_stroke_separator_length));
  final float strokeWidth=a.getDimension(R.styleable.SmoothProgressBar_spb_stroke_width,res.getDimension(R.dimen.spb_default_stroke_width));
  final float speed=a.getFloat(R.styleable.SmoothProgressBar_spb_speed,Float.parseFloat(res.getString(R.string.spb_default_speed)));
  final float speedProgressiveStart=a.getFloat(R.styleable.SmoothProgressBar_spb_progressiveStart_speed,speed);
  final float speedProgressiveStop=a.getFloat(R.styleable.SmoothProgressBar_spb_progressiveStop_speed,speed);
  final int iInterpolator=a.getInteger(R.styleable.SmoothProgressBar_spb_interpolator,-1);
  final boolean reversed=a.getBoolean(R.styleable.SmoothProgressBar_spb_reversed,res.getBoolean(R.bool.spb_default_reversed));
  final boolean mirrorMode=a.getBoolean(R.styleable.SmoothProgressBar_spb_mirror_mode,res.getBoolean(R.bool.spb_default_mirror_mode));
  final int colorsId=a.getResourceId(R.styleable.SmoothProgressBar_spb_colors,0);
  final boolean progressiveStartActivated=a.getBoolean(R.styleable.SmoothProgressBar_spb_progressiveStart_activated,res.getBoolean(R.bool.spb_default_progressiveStart_activated));
  final Drawable backgroundDrawable=a.getDrawable(R.styleable.SmoothProgressBar_spb_background);
  final boolean generateBackgroundWithColors=a.getBoolean(R.styleable.SmoothProgressBar_spb_generate_background_with_colors,false);
  a.recycle();
  Interpolator interpolator=null;
  if (iInterpolator == -1) {
    interpolator=getInterpolator();
  }
  if (interpolator == null) {
switch (iInterpolator) {
case INTERPOLATOR_ACCELERATEDECELERATE:
      interpolator=new AccelerateDecelerateInterpolator();
    break;
case INTERPOLATOR_DECELERATE:
  interpolator=new DecelerateInterpolator();
break;
case INTERPOLATOR_LINEAR:
interpolator=new LinearInterpolator();
break;
case INTERPOLATOR_ACCELERATE:
default :
interpolator=new AccelerateInterpolator();
}
}
int[] colors=null;
if (colorsId != 0) {
colors=res.getIntArray(colorsId);
}
SmoothProgressDrawable.Builder builder=new SmoothProgressDrawable.Builder(context).speed(speed).progressiveStartSpeed(speedProgressiveStart).progressiveStopSpeed(speedProgressiveStop).interpolator(interpolator).sectionsCount(sectionsCount).separatorLength(separatorLength).strokeWidth(strokeWidth).reversed(reversed).mirrorMode(mirrorMode).progressiveStart(progressiveStartActivated);
if (backgroundDrawable != null) {
builder.backgroundDrawable(backgroundDrawable);
}
if (generateBackgroundWithColors) {
builder.generateBackgroundUsingColors();
}
if (colors != null && colors.length > 0) builder.colors(colors);
 else builder.color(color);
SmoothProgressDrawable d=builder.build();
setIndeterminateDrawable(d);
}
