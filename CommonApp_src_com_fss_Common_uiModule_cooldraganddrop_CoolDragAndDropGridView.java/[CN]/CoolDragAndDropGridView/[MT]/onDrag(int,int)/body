{
  if (mScrollingStrategy != null && mScrollingStrategy.performScrolling(x,y,this)) {
    removeCallbacks(mDelayedOnDragRunnable);
    return;
  }
  final int tempDropPosition=pointToPosition(mCurrentPosition,x,y);
  if (mDragAndDropListener != null && mDropPosition != tempDropPosition && tempDropPosition != AdapterView.INVALID_POSITION) {
    removeCallbacks(mDelayedOnDragRunnable);
    if (mDragAndDropListener.isDragAndDropEnabled(tempDropPosition)) {
      mDropPosition=tempDropPosition;
      mDelayedOnDragRunnable=new Runnable(){
        @Override public void run(){
          mDragAndDropListener.onDraggingItem(mCurrentPosition,tempDropPosition);
          performDragAndDropSwapping(mCurrentPosition,tempDropPosition);
          final int nextDropPosition=pointToPosition(tempDropPosition,x,y);
          if (nextDropPosition == AdapterView.INVALID_POSITION) {
            mCurrentPosition=mDropPosition=tempDropPosition;
          }
        }
      }
;
      postDelayed(mDelayedOnDragRunnable,ITEM_HOVER_DELAY);
    }
 else {
      mDropPosition=mDragPosition;
    }
  }
  if (mDragImageView != null) {
    mWindowParams.x=x - mDragPointX + mDragOffsetX;
    mWindowParams.y=y - mDragPointY + mDragOffsetY;
    mWindowManager.updateViewLayout(mDragImageView,mWindowParams);
  }
}
