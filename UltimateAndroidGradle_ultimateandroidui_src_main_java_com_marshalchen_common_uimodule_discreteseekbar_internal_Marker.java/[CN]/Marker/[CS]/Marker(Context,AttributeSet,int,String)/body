{
  super(context,attrs,defStyleAttr);
  DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.DiscreteSeekBar,R.attr.discreteSeekBarStyle,R.style.DefaultSeekBar);
  int padding=(int)(PADDING_DP * displayMetrics.density) * 2;
  int textAppearanceId=a.getResourceId(R.styleable.DiscreteSeekBar_dsb_indicatorTextAppearance,R.style.DefaultIndicatorTextAppearance);
  mNumber=new TextView(context);
  mNumber.setPadding(padding,0,padding,0);
  mNumber.setTextAppearance(context,textAppearanceId);
  mNumber.setGravity(Gravity.CENTER);
  mNumber.setText(maxValue);
  mNumber.setMaxLines(1);
  mNumber.setSingleLine(true);
  SeekBarCompat.setTextDirection(mNumber,TEXT_DIRECTION_LOCALE);
  mNumber.setVisibility(View.INVISIBLE);
  setPadding(padding,padding,padding,padding);
  resetSizes(maxValue);
  mSeparation=(int)(SEPARATION_DP * displayMetrics.density);
  int thumbSize=(int)(ThumbDrawable.DEFAULT_SIZE_DP * displayMetrics.density);
  ColorStateList color=a.getColorStateList(R.styleable.DiscreteSeekBar_dsb_indicatorColor);
  mMarkerDrawable=new MarkerDrawable(color,thumbSize);
  mMarkerDrawable.setCallback(this);
  mMarkerDrawable.setMarkerListener(this);
  mMarkerDrawable.setExternalOffset(padding);
  float elevation=a.getDimension(R.styleable.DiscreteSeekBar_dsb_indicatorElevation,ELEVATION_DP * displayMetrics.density);
  ViewCompat.setElevation(this,elevation);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    SeekBarCompat.setOutlineProvider(this,mMarkerDrawable);
  }
  a.recycle();
}
