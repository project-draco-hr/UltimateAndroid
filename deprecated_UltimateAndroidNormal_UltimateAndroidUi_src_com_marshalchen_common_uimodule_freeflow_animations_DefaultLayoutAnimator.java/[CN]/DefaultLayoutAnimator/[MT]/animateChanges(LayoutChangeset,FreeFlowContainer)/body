{
  this.changeSet=changeSet;
  this.callback=callback;
  cancel();
  mIsRunning=true;
  disappearingSet=null;
  appearingSet=null;
  movingSet=null;
  Comparator<FreeFlowItem> cmp=new Comparator<FreeFlowItem>(){
    @Override public int compare(    FreeFlowItem lhs,    FreeFlowItem rhs){
      return (lhs.itemSection * 1000 + lhs.itemIndex) - (rhs.itemSection * 1000 + rhs.itemIndex);
    }
  }
;
  List<FreeFlowItem> removed=changeSet.getRemoved();
  if (removed.size() > 0) {
    Collections.sort(removed,cmp);
    disappearingSet=getItemsRemovedAnimation(changeSet.getRemoved());
  }
  List<FreeFlowItem> added=changeSet.getAdded();
  if (added.size() > 0) {
    Collections.sort(added,cmp);
    appearingSet=getItemsAddedAnimation(added);
  }
  if (changeSet.getMoved().size() > 0) {
    movingSet=getItemsMovedAnimation(changeSet.getMoved());
  }
  AnimatorSet all=getAnimationSequence();
  if (all == null) {
    mIsRunning=false;
    callback.onLayoutChangeAnimationsCompleted(this);
  }
 else {
    all.addListener(new AnimatorListener(){
      @Override public void onAnimationStart(      Animator animation){
      }
      @Override public void onAnimationRepeat(      Animator animation){
      }
      @Override public void onAnimationEnd(      Animator animation){
        mIsRunning=false;
        callback.onLayoutChangeAnimationsCompleted(DefaultLayoutAnimator.this);
      }
      @Override public void onAnimationCancel(      Animator animation){
      }
    }
);
    all.start();
  }
}
