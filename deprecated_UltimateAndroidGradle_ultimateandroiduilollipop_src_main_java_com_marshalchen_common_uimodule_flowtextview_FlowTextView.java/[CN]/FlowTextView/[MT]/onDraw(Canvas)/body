{
  super.onDraw(canvas);
  float mViewWidth=this.getWidth();
  obstacles.clear();
  int lowestYCoord=findBoxesAndReturnLowestObstacleYCoord();
  String[] blocks=mText.toString().split("\n");
  int charOffsetStart=0;
  int charOffsetEnd=0;
  int lineIndex=0;
  float xOffset;
  float maxWidth;
  float yOffset=0;
  String thisLineStr;
  int chunkSize;
  int lineHeight=getLineHeight();
  ArrayList<HtmlObject> lineObjects=new ArrayList<HtmlObject>();
  Object[] spans;
  HtmlObject htmlLine;
  mSpanParser.reset();
  for (int block_no=0; block_no <= blocks.length - 1; block_no++) {
    String thisBlock=blocks[block_no];
    if (thisBlock.length() <= 0) {
      lineIndex++;
      charOffsetEnd+=2;
      charOffsetStart=charOffsetEnd;
    }
 else {
      while (thisBlock.length() > 0) {
        lineIndex++;
        yOffset=lineIndex * lineHeight;
        Line thisLine=CollisionHelper.calculateLineSpaceForGivenYOffset(yOffset,lineHeight,mViewWidth,obstacles);
        xOffset=thisLine.leftBound;
        maxWidth=thisLine.rightBound - thisLine.leftBound;
        float actualWidth;
        do {
          chunkSize=getChunk(thisBlock,maxWidth);
          int thisCharOffset=charOffsetEnd + chunkSize;
          if (chunkSize > 1) {
            thisLineStr=thisBlock.substring(0,chunkSize);
          }
 else {
            thisLineStr="";
          }
          lineObjects.clear();
          if (mIsHtml) {
            spans=((Spanned)mText).getSpans(charOffsetStart,thisCharOffset,Object.class);
            if (spans.length > 0) {
              actualWidth=mSpanParser.parseSpans(lineObjects,spans,charOffsetStart,thisCharOffset,xOffset);
            }
 else {
              actualWidth=maxWidth;
            }
          }
 else {
            actualWidth=maxWidth;
          }
          if (actualWidth > maxWidth) {
            maxWidth-=5;
          }
        }
 while (actualWidth > maxWidth);
        charOffsetEnd+=chunkSize;
        if (lineObjects.size() <= 0) {
          htmlLine=new HtmlObject(thisLineStr,0,0,xOffset,mTextPaint);
          lineObjects.add(htmlLine);
        }
        for (        HtmlObject thisHtmlObject : lineObjects) {
          if (thisHtmlObject instanceof HtmlLink) {
            HtmlLink thisLink=(HtmlLink)thisHtmlObject;
            float thisLinkWidth=thisLink.paint.measureText(thisHtmlObject.content);
            mSpanParser.addLink(thisLink,yOffset,thisLinkWidth,lineHeight);
          }
          paintObject(canvas,thisHtmlObject.content,thisHtmlObject.xOffset,yOffset,thisHtmlObject.paint);
          if (thisHtmlObject.recycle) {
            mPaintHelper.recyclePaint(thisHtmlObject.paint);
          }
        }
        if (chunkSize >= 1)         thisBlock=thisBlock.substring(chunkSize,thisBlock.length());
        charOffsetStart=charOffsetEnd;
      }
    }
  }
  yOffset+=(lineHeight / 2);
  View child=getChildAt(getChildCount() - 1);
  if (child.getTag() != null) {
    if (child.getTag().toString().equalsIgnoreCase("hideable")) {
      if (yOffset > pageHeight) {
        if (yOffset < obstacles.get(obstacles.size() - 1).topLefty - getLineHeight()) {
          child.setVisibility(View.GONE);
        }
 else {
          child.setVisibility(View.VISIBLE);
        }
      }
 else {
        child.setVisibility(View.GONE);
      }
    }
  }
  mDesiredHeight=Math.max(lowestYCoord,(int)yOffset);
  if (needsMeasure) {
    needsMeasure=false;
    requestLayout();
  }
}
