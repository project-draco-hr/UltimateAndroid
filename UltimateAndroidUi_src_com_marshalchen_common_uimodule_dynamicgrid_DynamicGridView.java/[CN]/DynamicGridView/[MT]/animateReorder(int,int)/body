{
  boolean isForward=newPosition > oldPosition;
  List<Animator> resultList=new LinkedList<Animator>();
  if (isForward) {
    for (int pos=Math.min(oldPosition,newPosition); pos < Math.max(oldPosition,newPosition); pos++) {
      View view=getViewForId(getId(pos));
      if ((pos + 1) % getColumnCount() == 0) {
        resultList.add(createTranslationAnimations(view,-view.getWidth() * (getColumnCount() - 1),0,view.getHeight(),0));
      }
 else {
        resultList.add(createTranslationAnimations(view,view.getWidth(),0,0,0));
      }
    }
  }
 else {
    for (int pos=Math.max(oldPosition,newPosition); pos > Math.min(oldPosition,newPosition); pos--) {
      View view=getViewForId(getId(pos));
      if ((pos + getColumnCount()) % getColumnCount() == 0) {
        resultList.add(createTranslationAnimations(view,view.getWidth() * (getColumnCount() - 1),0,-view.getHeight(),0));
      }
 else {
        resultList.add(createTranslationAnimations(view,-view.getWidth(),0,0,0));
      }
    }
  }
  AnimatorSet resultSet=new AnimatorSet();
  resultSet.playTogether(resultList);
  resultSet.setDuration(MOVE_DURATION);
  resultSet.setInterpolator(new AccelerateDecelerateInterpolator());
  resultSet.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      mReorderAnimation=true;
      updateEnableState();
    }
    @Override public void onAnimationEnd(    Animator animation){
      mReorderAnimation=false;
      updateEnableState();
    }
  }
);
  resultSet.start();
}
